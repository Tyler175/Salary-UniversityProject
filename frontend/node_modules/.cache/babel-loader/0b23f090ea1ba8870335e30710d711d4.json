{"remainingRequest":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\components\\WorkEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\components\\WorkEdit.vue","mtime":1622135614439},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport UserService from \"../../services/user.service\";\nexport default {\n  name: 'TaskEdit',\n  props: ['work', 'post', 'put', 'del', 'option'],\n  data: function data() {\n    return {\n      message: '',\n      start: '',\n      end: '',\n      workDate: '',\n      task: {},\n      tasks: [],\n      findTask: ''\n    };\n  },\n  computed: {\n    allowToEdit: function allowToEdit() {\n      return this.option === 'project';\n    },\n    currentUser: function currentUser() {\n      return this.$store.state.auth.user;\n    },\n    formatDate: function formatDate() {\n      return function (date) {\n        var formDate = new Date(date);\n        var dd = formDate.getDate();\n        if (dd < 10) dd = '0' + dd;\n        var mm = formDate.getMonth() + 1;\n        if (mm < 10) mm = '0' + mm;\n        var yy = formDate.getFullYear();\n        if (yy < 10) yy = '0' + yy;\n        return yy + '-' + mm + '-' + dd;\n      };\n    },\n    dateValidate: function dateValidate() {\n      if (this.end.length !== 5 || this.start.length !== 5) {\n        return 'Пожалуйста, заполните время работы';\n      } else if (this.formatDate(new Date()) < this.formatDate(this.workDate)) {\n        return 'Выбранная дата позже сегодняшней';\n      } else if (this.task.taskName) {\n        // eslint-disable-next-line no-console\n        console.log(this.formatDate(this.task.task_start), this.formatDate(this.workDate));\n        if (this.formatDate(this.task.task_start) > this.formatDate(this.workDate)) return 'В это время у вас еще не было этой задачи';else return ''; //   ANOTHER TRUE RETURN\n      } else {\n        return '';\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.start = this.work.workStart ? this.formatTime(this.work.workStart) : this.formatTime(new Date());\n    this.end = this.work.workEnd ? this.formatTime(this.work.workEnd) : this.formatTime(new Date().setHours(new Date().getHours() + 1));\n    this.workDate = this.work.workStart ? this.formatDate(this.work.workStart) : this.formatDate(new Date());\n    this.task = this.work.task ? this.work.task : {};\n  },\n  methods: {\n    formatTime: function formatTime(time) {\n      var formDate = new Date(time);\n      var mm = formDate.getMinutes();\n      if (mm < 10) mm = '0' + mm;\n      var hh = formDate.getHours();\n      if (hh < 10) hh = '0' + hh;\n      return hh + ':' + mm;\n    },\n    timeMask: function timeMask(value) {\n      var hours = [/[0-2]/, value.charAt(0) === '2' ? /[0-3]/ : /[0-9]/];\n      var minutes = [/[0-5]/, /[0-9]/];\n      return value.length > 2 ? [].concat(hours, [':'], minutes) : hours;\n    },\n    findTasks: function findTasks() {\n      var _this = this;\n\n      if (this.findTask) {\n        UserService.getTaskByUserAndName(this.currentUser.id, this.findTask).then(function (response) {\n          _this.tasks = response.data;\n        });\n      } else {\n        this.tasks = [];\n      }\n    },\n    save: function save() {\n      var _this2 = this;\n\n      this.$validator.validateAll().then(function (isValid) {\n        if (isValid && !_this2.dateValidate && _this2.task.taskName) {\n          _this2.work.task = _this2.task;\n          _this2.work.workStart = new Date(_this2.workDate + ' ' + _this2.start);\n          _this2.work.workEnd = new Date(_this2.workDate + ' ' + _this2.end);\n\n          if (_this2.work.id) {\n            UserService.putWork(_this2.work).then(function (response) {\n              if (!response.data) _this2.message = 'В это время вы делали другую задачу!';else {\n                _this2.put(response.data);\n\n                _this2.message = 'Время работы обновлено!';\n              }\n            }, function (error) {\n              _this2.message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n            });\n          } else {\n            UserService.postWork(_this2.work).then(function (response) {\n              if (!response.data) {\n                _this2.message = 'В это время вы делали другую задачу!';\n              } else {\n                _this2.work.id = response.data.id;\n\n                _this2.post(response.data);\n\n                _this2.message = 'Время работы добавлено!';\n              }\n            }, function (error) {\n              _this2.message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n            });\n          }\n        } else _this2.message = 'Пожалуйста, измените данные';\n      });\n    },\n    setTask: function setTask(task) {\n      if (this.task.taskName) this.tasks.push(this.task);\n      this.tasks.splice(this.tasks.findIndex(function (i) {\n        return i.id === task.id;\n      }), 1);\n      this.task = task;\n    },\n    deleteTask: function deleteTask() {\n      var _this3 = this;\n\n      if (this.work.id) {\n        UserService.delWork(this.work.id).then(function (response) {\n          _this3.del(_this3.work);\n\n          response.data;\n          _this3.message = 'Время работы удалено!';\n\n          _this3.$emit('hide');\n        }, function (error) {\n          _this3.message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["WorkEdit.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"cover\">\r\n    <div class = \"editor\">\r\n      <input class=\"close\" type=\"button\" value=\"Х\" v-on:click=\"$emit('whide')\"/>\r\n      <div class=\"row\"><h2 style=\"margin:5px\">{{ task.taskName ? task.taskName : 'Задача не выбрана' }}</h2></div>\r\n      <div class=\"row\">\r\n        <div class=\"column\">\r\n          <input v-bind:disabled=\"allowToEdit\" class=\"select\" type=\"text\" maxlength=\"50\" v-autowidth=\"{maxWidth: '700px', minWidth: '505px', comfortZone: 0}\"\r\n                 v-model=\"findTask\" v-on:input=\"findTasks\"/>\r\n\r\n          <select v-if=\"tasks.length > 0\" class=\"select\" multiple v-bind:size=\"tasks.length > 0 ? tasks.length < 6 ? tasks.length : 5: 1\" style=\"margin-top: -2px\">\r\n            <option v-for=\"task in tasks\" :key=\"task.id\" @click=\"setTask(task)\">{{ task.taskName }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div class = \"fields\" style=\"max-width: 600px; flex-direction: row;\">\r\n        <div style=\"width: 100%; margin-right: 30px\">\r\n          <h3>Дата</h3>\r\n          <input v-bind:disabled=\"allowToEdit\" type=\"date\" v-model=\"workDate\" min=\"2015-01-01\" max=\"2030-01-01\" style=\"height: 50px\"/>\r\n        </div>\r\n        <div style=\"width: 100%; margin-right: 30px\">\r\n          <h3>Начало</h3>\r\n          <input v-bind:disabled=\"allowToEdit\" v-mask=\"timeMask\" v-model=\"start\"/>\r\n        </div>\r\n        <div style=\"width: 100%; margin-right: 30px\">\r\n          <h3>Конец</h3>\r\n          <input v-bind:disabled=\"allowToEdit\" v-mask=\"timeMask\" v-model=\"end\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"dateValidate\" class=\"alert-error\">{{dateValidate}}</div>\r\n\r\n      <div v-if=\"this.option === 'project'\" class = \"fields\" style=\"max-width: 600px; flex-direction: row;\">\r\n        <div style=\"width: 100%; margin-right: 30px\">\r\n          <h3>Исполнитель</h3>\r\n          <div class=\"task\" style=\"width: auto; margin-right: 0px; cursor: auto\">{{this.work.user.username}} - {{this.work.user.email}}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class = \"row\" v-if=\"!allowToEdit\">\r\n        <div class=\"button-g\" @click=\"save\">Сохранить</div>\r\n        <div class=\"button-b\" v-on:click=\"$emit('whide')\">Отменить</div>\r\n        <div class=\"button-r\"  @click=\"deleteTask\" v-if=\"work.id\">Удалить</div>\r\n      </div>\r\n      {{message}}\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport UserService from '../../services/user.service';\r\n\r\nexport default {\r\n  name: 'TaskEdit',\r\n  props: ['work','post','put','del', 'option'],\r\n  data() {\r\n    return {\r\n      message: '',\r\n      start: '',\r\n      end: '',\r\n      workDate: '',\r\n      task: {},\r\n      tasks: [],\r\n\r\n\r\n      findTask: ''\r\n    };\r\n  },\r\n  computed: {\r\n    allowToEdit(){\r\n      return (this.option === 'project');\r\n    },\r\n    currentUser() {\r\n      return this.$store.state.auth.user;\r\n    },\r\n    formatDate() {\r\n      return date => {\r\n        let formDate = new Date(date);\r\n        let dd = formDate.getDate();\r\n        if (dd < 10) dd = '0' + dd;\r\n        let mm = formDate.getMonth() + 1;\r\n        if (mm < 10) mm = '0' + mm;\r\n        let yy = formDate.getFullYear();\r\n        if (yy < 10) yy = '0' + yy;\r\n        return  yy + '-' + mm + '-' + dd;\r\n      }\r\n    },\r\n\r\n    dateValidate(){\r\n      if (this.end.length !== 5 || this.start.length !== 5) {\r\n        return 'Пожалуйста, заполните время работы'\r\n      } else if(this.formatDate(new Date()) < this.formatDate(this.workDate)){\r\n         return 'Выбранная дата позже сегодняшней';\r\n      } else if(this.task.taskName){\r\n        // eslint-disable-next-line no-console\r\n        console.log(this.formatDate(this.task.task_start), this.formatDate(this.workDate));\r\n        if (this.formatDate(this.task.task_start) > this.formatDate(this.workDate)) return 'В это время у вас еще не было этой задачи';\r\n        else return '';//   ANOTHER TRUE RETURN\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.start = this.work.workStart ? this.formatTime(this.work.workStart): this.formatTime(new Date());\r\n\r\n    this.end = this.work.workEnd ? this.formatTime(this.work.workEnd): this.formatTime(new Date().setHours(new Date().getHours()+1));\r\n\r\n    this.workDate = this.work.workStart ? this.formatDate(this.work.workStart): this.formatDate(new Date());\r\n\r\n    this.task = this.work.task ? this.work.task : {};\r\n\r\n  },\r\n  methods: {\r\n    formatTime(time){\r\n      let formDate = new Date(time);\r\n      let mm = formDate.getMinutes();\r\n      if (mm < 10) mm = '0' + mm;\r\n      let hh = formDate.getHours();\r\n      if (hh < 10) hh = '0' + hh;\r\n      return hh+':'+mm;\r\n    },\r\n    timeMask(value) {\r\n      const hours = [\r\n        /[0-2]/,\r\n        value.charAt(0) === '2' ? /[0-3]/ : /[0-9]/,\r\n      ];\r\n      const minutes = [/[0-5]/, /[0-9]/];\r\n      return value.length > 2\r\n          ? [...hours, ':', ...minutes]\r\n          : hours;\r\n    },\r\n\r\n    findTasks(){\r\n      if (this.findTask){\r\n        UserService.getTaskByUserAndName(this.currentUser.id, this.findTask).then(\r\n            response => {\r\n              this.tasks = response.data;\r\n            }\r\n        )\r\n      } else {\r\n        this.tasks = [];\r\n      }\r\n    },\r\n    save(){\r\n      this.$validator.validateAll().then(isValid => {\r\n        if (isValid && !this.dateValidate && this.task.taskName) {\r\n          this.work.task = this.task;\r\n          this.work.workStart = new Date(this.workDate +' '+ this.start);\r\n          this.work.workEnd = new Date(this.workDate +' '+ this.end);\r\n\r\n          if (this.work.id){\r\n            UserService.putWork(this.work).then(\r\n                response => {\r\n                  if (!response.data) this.message = 'В это время вы делали другую задачу!';\r\n                  else{\r\n                    this.put(response.data);\r\n                    this.message = 'Время работы обновлено!'\r\n                  }\r\n                },\r\n                error => {\r\n                  this.message =\r\n                      (error.response && error.response.data && error.response.data.message) ||\r\n                      error.message ||\r\n                      error.toString();\r\n                }\r\n            );\r\n          } else{\r\n            UserService.postWork(this.work).then(\r\n                response => {\r\n                  if (!response.data){\r\n                    this.message = 'В это время вы делали другую задачу!';\r\n                  }\r\n                  else{\r\n                    this.work.id = response.data.id;\r\n                    this.post(response.data);\r\n                    this.message = 'Время работы добавлено!'\r\n                  }\r\n\r\n                },\r\n                error => {\r\n                  this.message =\r\n                      (error.response && error.response.data && error.response.data.message) ||\r\n                      error.message ||\r\n                      error.toString();\r\n                }\r\n            );\r\n          }\r\n        } else this.message = 'Пожалуйста, измените данные'\r\n      });\r\n    },\r\n    setTask(task){\r\n      if (this.task.taskName) this.tasks.push(this.task)\r\n      this.tasks.splice(this.tasks.findIndex(i => i.id === task.id), 1);\r\n      this.task = task;\r\n    },\r\n    deleteTask(){\r\n      if (this.work.id){\r\n        UserService.delWork(this.work.id).then(\r\n            response => {\r\n              this.del(this.work);\r\n              response.data;\r\n              this.message = 'Время работы удалено!'\r\n              this.$emit('hide');\r\n            },\r\n            error => {\r\n              this.message =\r\n                  (error.response && error.response.data && error.response.data.message) ||\r\n                  error.message ||\r\n                  error.toString();\r\n            }\r\n        );}\r\n    }\r\n  }\r\n};\r\n</script>"],"sourceRoot":"src/views/components"}]}