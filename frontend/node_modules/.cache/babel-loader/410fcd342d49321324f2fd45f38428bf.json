{"remainingRequest":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\src\\services\\user.service.js","dependencies":[{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\src\\services\\user.service.js","mtime":1637240473895},{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"C:/\\u0412\\u0443\\u0437/\\u0422\\u0435\\u0445\\u043D\\u0420\\u0430\\u0437\\u041F\\u041E/Salary/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/\\u0412\\u0443\\u0437/\\u0422\\u0435\\u0445\\u043D\\u0420\\u0430\\u0437\\u041F\\u041E/Salary/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport authHeader from \"./auth-header\";\nvar API_URL = 'http://localhost:8080/api/';\n\nvar UserService = /*#__PURE__*/function () {\n  function UserService() {\n    _classCallCheck(this, UserService);\n  }\n\n  _createClass(UserService, [{\n    key: \"getUser\",\n    value: function getUser(user_id) {\n      return axios.get(API_URL + 'users/' + user_id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"uploadProfilePicture\",\n    value: function uploadProfilePicture(user_id, profilePicture) {\n      var header = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      header.Authorization = authHeader().Authorization;\n      return axios.post(API_URL + 'users/upload/' + user_id, profilePicture, {\n        headers: header\n      });\n    }\n  }, {\n    key: \"getToday\",\n    value: function getToday() {\n      return axios.get(API_URL + 'today', {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getCurrentWork\",\n    value: function getCurrentWork(user_id, task_id) {\n      return axios.get(API_URL + 'works/' + user_id + '/' + task_id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"postWork\",\n    value: function postWork(work) {\n      return axios.post(API_URL + 'works', {\n        workStart: work.workStart,\n        workEnd: work.workEnd,\n        task: work.task,\n        user: work.user\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"putWork\",\n    value: function putWork(work) {\n      return axios.put(API_URL + 'works/' + work.id, {\n        workStart: work.workStart,\n        workEnd: work.workEnd,\n        task: work.task,\n        user: work.user\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"setWorkEnd\",\n    value: function setWorkEnd(work) {\n      return axios.put(API_URL + 'works', {\n        workStart: work.workStart,\n        workEnd: work.workEnd,\n        task: work.task,\n        user: work.user\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getTimer\",\n    value: function getTimer(id) {\n      return axios.get(API_URL + 'today/timer/' + id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"saveTimer\",\n    value: function saveTimer(id, timer) {\n      return axios.put(API_URL + 'today/timer/' + id, {\n        timer: timer\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getWorksByUser\",\n    value: function getWorksByUser(user_id) {\n      return axios.get(API_URL + 'works', {\n        headers: authHeader(),\n        params: {\n          user_id: user_id\n        }\n      });\n    }\n  }, {\n    key: \"getWorksByProject\",\n    value: function getWorksByProject(project_id) {\n      return axios.get(API_URL + 'works', {\n        headers: authHeader(),\n        params: {\n          project_id: project_id\n        }\n      });\n    }\n  }, {\n    key: \"delWork\",\n    value: function delWork(id) {\n      return axios.delete(API_URL + 'works/' + id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getTasks\",\n    value: function getTasks() {\n      return axios.get(API_URL + 'tasks', {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getTaskById\",\n    value: function getTaskById(id) {\n      return axios.get(API_URL + 'tasks/' + id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getTaskByUserAndName\",\n    value: function getTaskByUserAndName(user_id, task_name) {\n      return axios.get(API_URL + 'tasks', {\n        headers: authHeader(),\n        params: {\n          user_id: user_id,\n          task_name: task_name\n        }\n      });\n    }\n  }, {\n    key: \"postTask\",\n    value: function postTask(task) {\n      if (task.taskComplete === null) {\n        task.taskComplete = false;\n      }\n\n      return axios.post(API_URL + 'tasks', {\n        taskName: task.taskName,\n        task_description: task.task_description,\n        parent: task.parent,\n        task_start: task.task_start,\n        task_end: task.task_end,\n        taskComplete: task.taskComplete,\n        taskDelete: task.taskDelete,\n        current: task.current,\n        workers: task.workers,\n        plans: task.plans\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"putTask\",\n    value: function putTask(task) {\n      return axios.put(API_URL + 'tasks/' + task.id, {\n        taskName: task.taskName,\n        task_description: task.task_description,\n        parent: task.parent,\n        task_start: task.task_start,\n        task_end: task.task_end,\n        taskComplete: task.taskComplete,\n        taskDelete: task.taskDelete,\n        current: task.current,\n        workers: task.workers,\n        plans: task.plans\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"delTask\",\n    value: function delTask(id) {\n      return axios.delete(API_URL + 'tasks/' + id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"postPlan\",\n    value: function postPlan(plan) {\n      return axios.post(API_URL + 'tasks/plan', {\n        task: plan.task,\n        user: plan.user,\n        plan: plan.plan\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"putPlan\",\n    value: function putPlan(plan, task) {\n      return axios.put(API_URL + 'tasks/plan', {\n        task: task,\n        user: plan.user,\n        plan: plan.plan\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"delPlan\",\n    value: function delPlan(plan) {\n      return axios.delete(API_URL + 'tasks/plan', {\n        headers: authHeader(),\n        params: {\n          plan: plan\n        }\n      });\n    }\n  }, {\n    key: \"getUsersByEmail\",\n    value: function getUsersByEmail(email) {\n      return axios.get(API_URL + 'users', {\n        headers: authHeader(),\n        params: {\n          email: email\n        }\n      });\n    }\n  }, {\n    key: \"isPasswordCorrect\",\n    value: function isPasswordCorrect(password) {\n      return axios.get(API_URL + 'users', {\n        headers: authHeader(),\n        params: {\n          password: password\n        }\n      });\n    }\n  }, {\n    key: \"changeRoles\",\n    value: function changeRoles(user) {\n      {\n        return axios.put(API_URL + 'users/' + user.id, {\n          roles: user.roles\n        }, {\n          headers: authHeader()\n        });\n      }\n    }\n  }, {\n    key: \"delUser\",\n    value: function delUser(user) {\n      return axios.delete(API_URL + 'users/' + user.id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getEditPermissions\",\n    value: function getEditPermissions(id) {\n      return axios.get(API_URL + 'tasks/permissions/' + id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getInvitations\",\n    value: function getInvitations() {\n      return axios.get(API_URL + 'projects/invitations', {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getProjects\",\n    value: function getProjects() {\n      return axios.get(API_URL + 'projects', {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getAllProjects\",\n    value: function getAllProjects() {\n      return axios.get(API_URL + 'projects/all', {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getProject\",\n    value: function getProject(id) {\n      return axios.get(API_URL + 'projects/' + id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"postProject\",\n    value: function postProject() {\n      return axios.post(API_URL + 'projects', {\n        name: \"Новый проект\"\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"changeProjectName\",\n    value: function changeProjectName(project) {\n      return axios.put(API_URL + 'projects/' + project.id, {\n        name: project.name\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"changeInvitation\",\n    value: function changeInvitation(project) {\n      return axios.put(API_URL + 'projects/invitation/' + project.id, {\n        invitations: project.invitations\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"changeUsers\",\n    value: function changeUsers(project) {\n      return axios.put(API_URL + 'projects/workers/' + project.id, {\n        workers: project.workers\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"changeTasks\",\n    value: function changeTasks(project) {\n      return axios.put(API_URL + 'projects/tasks/' + project.id, {\n        tasks: project.tasks\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"delProject\",\n    value: function delProject(id) {\n      return axios.delete(API_URL + 'projects/' + id, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"changePassword\",\n    value: function changePassword(id, oldPassword, newPassword) {\n      return axios.put(API_URL + 'users/' + id + '/' + oldPassword, {\n        password: newPassword\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"changeAbout\",\n    value: function changeAbout(id, about) {\n      return axios.put(API_URL + 'profile/' + id, {\n        description: about\n      }, {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getModeratorBoard\",\n    value: function getModeratorBoard() {\n      return axios.get(API_URL + 'mod', {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"getAdminBoard\",\n    value: function getAdminBoard() {\n      return axios.get(API_URL + 'admin', {\n        headers: authHeader()\n      });\n    }\n  }, {\n    key: \"countUsers\",\n    value: function countUsers() {\n      return axios.get(API_URL + 'users/count', {\n        headers: authHeader()\n      });\n    }\n  }]);\n\n  return UserService;\n}();\n\nexport default new UserService();",{"version":3,"sources":["C:/Вуз/ТехнРазПО/Salary/frontend/src/services/user.service.js"],"names":["axios","authHeader","API_URL","UserService","user_id","get","headers","profilePicture","header","Authorization","post","task_id","work","workStart","workEnd","task","user","put","id","timer","params","project_id","delete","task_name","taskComplete","taskName","task_description","parent","task_start","task_end","taskDelete","current","workers","plans","plan","email","password","roles","name","project","invitations","tasks","oldPassword","newPassword","about","description"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport authHeader from './auth-header';\n\nconst API_URL = 'http://localhost:8080/api/';\n\nclass UserService {\n  getUser(user_id) {\n    return axios.get(API_URL + 'users/' + user_id, { headers: authHeader() });\n  }\n  uploadProfilePicture(user_id, profilePicture){\n    let header = {\n      \"Content-Type\": \"multipart/form-data\"\n    };\n    header.Authorization = authHeader().Authorization;\n    return axios.post(API_URL + 'users/upload/' + user_id, profilePicture, {headers: header});\n  }\n\n  getToday() {\n    return axios.get(API_URL + 'today', { headers: authHeader() });\n  }\n  getCurrentWork(user_id, task_id){\n    return axios.get(API_URL + 'works/' + user_id + '/' + task_id, { headers: authHeader() });\n  }\n  postWork(work) {\n    return axios.post(API_URL + 'works', {\n      workStart: work.workStart,\n      workEnd: work.workEnd,\n      task: work.task,\n      user: work.user\n    }, { headers: authHeader() })\n  }\n  putWork(work) {\n    return axios.put(API_URL + 'works/'+work.id, {\n      workStart: work.workStart,\n      workEnd: work.workEnd,\n      task: work.task,\n      user: work.user\n    }, { headers: authHeader() })\n  }\n  setWorkEnd(work) {\n    return axios.put(API_URL + 'works', {\n      workStart: work.workStart,\n      workEnd: work.workEnd,\n      task: work.task,\n      user: work.user\n    }, { headers: authHeader() })\n  }\n  getTimer(id){\n    return axios.get(API_URL + 'today/timer/' + id, { headers: authHeader() })\n  }\n  saveTimer(id, timer){\n    return axios.put(API_URL + 'today/timer/' + id, {timer: timer}, { headers: authHeader() })\n  }\n\n  getWorksByUser(user_id){\n    return axios.get(API_URL + 'works', { headers: authHeader(), params:{user_id: user_id} });\n  }\n  getWorksByProject(project_id){\n    return axios.get(API_URL + 'works', { headers: authHeader(), params:{project_id: project_id} });\n  }\n  delWork(id){\n    return axios.delete(API_URL + 'works/' + id, { headers: authHeader() });\n  }\n\n  getTasks() {\n    return axios.get(API_URL + 'tasks', { headers: authHeader() });\n  }\n  getTaskById(id){\n    return axios.get(API_URL + 'tasks/' + id, { headers: authHeader() });\n  }\n  getTaskByUserAndName(user_id, task_name){\n    return axios.get(API_URL + 'tasks', { headers: authHeader(), params:{user_id: user_id, task_name: task_name} });\n  }\n  postTask(task){\n    if (task.taskComplete === null) {task.taskComplete = false}\n    return axios.post(API_URL + 'tasks', {\n      taskName: task.taskName,\n      task_description: task.task_description,\n      parent: task.parent,\n      task_start: task.task_start,\n      task_end: task.task_end,\n      taskComplete: task.taskComplete,\n      taskDelete: task.taskDelete,\n      current: task.current,\n      workers: task.workers,\n      plans: task.plans\n    }, { headers: authHeader() })\n  }\n  putTask(task){\n    return axios.put(API_URL + 'tasks/'+task.id, {\n      taskName: task.taskName,\n      task_description: task.task_description,\n      parent: task.parent,\n      task_start: task.task_start,\n      task_end: task.task_end,\n      taskComplete: task.taskComplete,\n      taskDelete: task.taskDelete,\n      current: task.current,\n      workers: task.workers,\n      plans: task.plans\n    }, { headers: authHeader() })\n  }\n  delTask(id){\n    return axios.delete(API_URL + 'tasks/' + id, { headers: authHeader() });\n  }\n  postPlan(plan){return axios.post(API_URL + 'tasks/plan', {task: plan.task, user: plan.user, plan: plan.plan}, { headers: authHeader() })}\n  putPlan(plan, task){return axios.put(API_URL + 'tasks/plan', {task: task, user: plan.user, plan: plan.plan}, { headers: authHeader() })}\n  delPlan(plan){\n    return axios.delete(API_URL + 'tasks/plan', { headers: authHeader(), params:{plan: plan} });\n  }\n\n  getUsersByEmail(email){\n    return axios.get(API_URL + 'users', { headers: authHeader(), params:{email: email}});\n  }\n\n\n  isPasswordCorrect(password){\n    return axios.get(API_URL + 'users', { headers: authHeader(), params:{password: password}});\n  }\n  changeRoles(user){\n    {return axios.put(API_URL + 'users/'+user.id, {roles: user.roles}, { headers: authHeader() })}\n  }\n\n\n  delUser(user){\n    return axios.delete(API_URL + 'users/' + user.id, { headers: authHeader() });\n  }\n  getEditPermissions(id){\n    return axios.get(API_URL + 'tasks/permissions/' + id, { headers: authHeader() });\n  }\n\n  getInvitations(){\n    return axios.get(API_URL + 'projects/invitations', { headers: authHeader() });\n  }\n  getProjects() {\n    return axios.get(API_URL + 'projects', { headers: authHeader() });\n  }\n  getAllProjects() {\n    return axios.get(API_URL + 'projects/all', { headers: authHeader() });\n  }\n  getProject(id) {\n    return axios.get(API_URL + 'projects/' + id, { headers: authHeader() });\n  }\n  postProject(){\n    return axios.post(API_URL + 'projects', {name: \"Новый проект\"}, { headers: authHeader() })\n  }\n  changeProjectName(project){\n    return axios.put(API_URL + 'projects/' + project.id, {name: project.name}, { headers: authHeader() });\n  }\n  changeInvitation(project){\n    return axios.put(API_URL + 'projects/invitation/' + project.id, {invitations: project.invitations}, { headers: authHeader() });\n  }\n  changeUsers(project){\n    return axios.put(API_URL + 'projects/workers/' + project.id, {workers: project.workers}, { headers: authHeader() });\n  }\n  changeTasks(project){\n    return axios.put(API_URL + 'projects/tasks/' + project.id, {tasks: project.tasks}, { headers: authHeader() });\n  }\n  delProject(id){\n    return axios.delete(API_URL + 'projects/' + id, { headers: authHeader() });\n  }\n  changePassword(id, oldPassword, newPassword){\n    return axios.put(API_URL + 'users/' + id + '/' + oldPassword, {password: newPassword}, { headers: authHeader() });\n  }\n  changeAbout(id, about){\n    return axios.put(API_URL + 'profile/' + id, {description: about}, { headers: authHeader() });\n  }\n\n  getModeratorBoard() {\n    return axios.get(API_URL + 'mod', { headers: authHeader() });\n  }\n  getAdminBoard() {\n    return axios.get(API_URL + 'admin', { headers: authHeader() });\n  }\n  countUsers(){\n    return axios.get(API_URL + 'users/count', { headers: authHeader() });\n  }\n}\n\nexport default new UserService();\n"]}]}