{"remainingRequest":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\Today.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\Today.vue","mtime":1622192781411},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport UserService from \"../services/user.service\";\nimport TaskEdit from \"@/views/components/TaskEdit.vue\";\nexport default {\n  name: 'Today',\n  data: function data() {\n    return {\n      isHidden: true,\n      tasks: [],\n      content: '',\n      task: {},\n      current: {},\n      work: null,\n      checkId: null,\n      timerId: null,\n      startDate: new Date(),\n      currentTimer: 0,\n      timer: 0,\n      currentTime: '00:00:00'\n    };\n  },\n  components: {\n    'v-taskEdit': TaskEdit\n  },\n  computed: {\n    formatDate: function formatDate() {\n      return function (date) {\n        var formDate = new Date(date);\n        var dd = formDate.getDate();\n        if (dd < 10) dd = '0' + dd;\n        var mm = formDate.getMonth() + 1;\n        if (mm < 10) mm = '0' + mm;\n        var yy = formDate.getFullYear();\n        if (yy < 10) yy = '0' + yy;\n        return yy + '-' + mm + '-' + dd;\n      };\n    },\n    filterTasks: function filterTasks() {\n      var _this = this;\n\n      return this.tasks.filter(function (item) {\n        return _this.formatDate(item.task_start) <= _this.formatDate(new Date()) && _this.formatDate(item.task_end) >= _this.formatDate(new Date()) && !item.current;\n      });\n    },\n    currentUser: function currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin: function isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager: function isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n\n      return false;\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n\n    UserService.getToday().then(function (response) {\n      _this2.tasks = response.data;\n      _this2.current = _this2.tasks.find(function (item) {\n        return item.current;\n      });\n      _this2.current = _this2.current ? _this2.current : {};\n      if (_this2.current.id) UserService.getCurrentWork(_this2.currentUser.id, _this2.current.id).then(function (response) {\n        _this2.work = response.data;\n\n        if (!_this2.work) {\n          _this2.work = {};\n        } else {\n          _this2.timerId = setTimeout(_this2.countdown, 1);\n        }\n\n        if (_this2.work.startDate) _this2.timer = new Date().getTime() - _this2.work.startDate.getTime();\n        var seconds = Math.floor(_this2.timer / 1000 % 60);\n        var minutes = Math.floor(_this2.timer / 1000 / 60 % 60);\n        var hours = Math.floor(_this2.timer / (1000 * 60 * 60) % 24); //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n        if (seconds < 10) seconds = '0' + seconds;\n        if (minutes < 10) minutes = '0' + minutes;\n        if (hours < 10) hours = '0' + hours;\n        _this2.currentTime = hours + ':' + minutes + ':' + seconds;\n      });else {\n        UserService.saveTimer(_this2.currentUser.id, 0);\n      }\n    }, function (error) {\n      _this2.content = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    });\n    UserService.getTimer(this.currentUser.id).then(function (response) {\n      _this2.timer = response.data;\n    }); //\n    //\n  },\n  methods: {\n    openEdit: function openEdit(task) {\n      if (task === 0) {\n        this.task = {};\n      } else {\n        this.task = {};\n        Object.assign(this.task, task);\n      }\n\n      this.isHidden = false;\n    },\n    toStart: function toStart(task) {\n      if (task) {\n        //if we choose task from list\n        if (this.current.taskName) {\n          this.toStop();\n          this.current.current = false;\n          UserService.putTask(this.current);\n        }\n\n        this.currentTime = '00:00:00';\n        this.current = task;\n        this.current.current = true;\n        UserService.putTask(this.current);\n        this.timer = 0;\n        UserService.saveTimer(this.currentUser.id, this.timer);\n      } //continue after break\n\n\n      if (this.work === '') this.work = {}; //i dont know how it became a string\n\n      this.work.task = this.current;\n      this.work.workStart = new Date();\n      this.work.workEnd = null;\n      if (this.checkId != null) clearTimeout(this.checkId);\n      this.checkId = setTimeout(UserService.postWork, 1000, this.work);\n      this.timerId = setTimeout(this.countdown, 1);\n    },\n    toStop: function toStop() {\n      if (this.currentTimer - this.timer > 1000) {\n        this.work.workEnd = new Date();\n        this.timer = this.currentTimer;\n        UserService.saveTimer(this.currentUser.id, this.timer);\n        UserService.setWorkEnd(this.work);\n      }\n\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    },\n    countdown: function countdown() {\n      this.currentTimer = new Date().getTime() - new Date(this.work.workStart).getTime();\n      this.currentTimer += this.timer;\n      var seconds = Math.floor(this.currentTimer / 1000 % 60);\n      var minutes = Math.floor(this.currentTimer / 1000 / 60 % 60);\n      var hours = Math.floor(this.currentTimer / (1000 * 60 * 60) % 24); //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n      if (seconds < 10) seconds = '0' + seconds;\n      if (minutes < 10) minutes = '0' + minutes;\n      if (hours < 10) hours = '0' + hours;\n      this.currentTime = hours + ':' + minutes + ':' + seconds;\n      this.timerId = setTimeout(this.countdown, 1000);\n    },\n    post: function post(task) {\n      this.tasks.push(task);\n      Object.assign(this.task, task);\n    },\n    put: function put(task) {\n      this.tasks.splice(this.tasks.findIndex(function (item) {\n        return item.id == task.id;\n      }), 1, task);\n    },\n    del: function del(task) {\n      this.tasks.splice(this.tasks.findIndex(function (item) {\n        return item.id === task.id;\n      }), 1);\n    }\n  }\n};",{"version":3,"sources":["Today.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <v-taskEdit v-if='!isHidden' v-on:hide=\"isHidden = true\"\n                :task=\"task\" :post=\"post\" :put=\"put\" :del=\"del\"></v-taskEdit>\n\n    <div v-if=\"currentUser\" class=\"user-menu\">\n      <li>\n        <router-link to=\"/today\" class=\"active\" @click.prevent>To Do</router-link>\n      </li>\n      <li>\n        <router-link to=\"/tasks\">Задачи</router-link>\n      </li>\n      <li>\n        <router-link to=\"/statistics\">Статистика</router-link>\n      </li>\n      <li>\n        <router-link to=\"/projects\">Проекты</router-link>\n      </li>\n      <li>\n        <router-link to=\"/profile\">Мой профиль</router-link>\n      </li>\n      <li v-if=\"isUserManager && false\">\n        <router-link to=\"/mod\">Панель модератора</router-link>\n      </li>\n      <li v-if=\"isUserAdmin\">\n        <router-link to=\"/admin\">Панель администратора</router-link>\n      </li>\n    </div>\n    <div class=\"content\">\n      <div class=\"action\">\n        <router-link to=\"/profile\">\n          <h2 style=\"margin: 0\">{{ currentUser.username }}</h2>\n        </router-link>\n      </div>\n      <div>\n        <h1>Текущая задача</h1>\n        <div class=\"row\">\n          <div v-if=\"!current.taskName\" class=\"task\" style=\"cursor: auto\"> Задача не выбрана </div>\n          <div v-else class=\"task\" style=\"cursor: auto\"> {{ current.taskName }} </div>\n          <div class=\"timer\"> {{ currentTime }} &nbsp;</div>\n        </div>\n        <button class=\"button-b\" v-if=\"current.taskName && timerId != null\" @click=\"toStop\">Перерыв</button>\n        <button style=\"width: auto\" class=\"button-g\" v-if=\"current.taskName && timerId === null\" @click=\"toStart(0)\">Продолжить</button>\n        <div class=\"row\">\n          <h1>Задачи на сегодня</h1>\n          <button class=\"button-p\" @click=\"openEdit(0)\">Добавить задачу</button>\n        </div>\n        <div class=\"row\" v-for=\"task in filterTasks\" :key=\"task.id\">\n          <div class=\"task\"  @click=\"openEdit(task)\">{{task.taskName}}</div>\n          <button class=\"button-g\" @click=\"toStart(task)\">Начать</button>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n</template>\n\n<script>\nimport UserService from '../services/user.service';\nimport TaskEdit from \"@/views/components/TaskEdit.vue\";\n\nexport default {\n  name: 'Today',\n  data() {\n    return {\n      isHidden: true,\n      tasks: [],\n      content: '',\n      task: {},\n      current: {},\n\n      work: null,\n\n      checkId: null,\n      timerId: null,\n      startDate: new Date(),\n      currentTimer: 0,\n      timer: 0,\n      currentTime: '00:00:00'\n    };\n  },\n  components:{\n    'v-taskEdit' : TaskEdit\n  },\n  computed: {\n    formatDate() {\n      return date => {\n        let formDate = new Date(date);\n        let dd = formDate.getDate();\n        if (dd < 10) dd = '0' + dd;\n        let mm = formDate.getMonth() + 1;\n        if (mm < 10) mm = '0' + mm;\n        let yy = formDate.getFullYear();\n        if (yy < 10) yy = '0' + yy;\n        return  yy + '-' + mm + '-' + dd;\n      }\n\n    },\n    filterTasks(){\n    return this.tasks.filter(item =>\n          (this.formatDate(item.task_start) <= this.formatDate(new Date())) &&\n          (this.formatDate(item.task_end) >= this.formatDate(new Date())) && !item.current\n      );\n    },\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n\n      return false;\n    }\n  },\n  mounted() {\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n    UserService.getToday().then(\n      response => {\n        this.tasks = response.data;\n        this.current = this.tasks.find(item => item.current);\n        this.current = this.current ? this.current : {};\n        if (this.current.id) UserService.getCurrentWork(this.currentUser.id, this.current.id).then(\n            response => {\n              this.work = response.data;\n              if (!this.work) {\n                this.work = {};\n              } else{\n                this.timerId = setTimeout(this.countdown, 1);\n              }\n              if (this.work.startDate) this.timer = new Date().getTime() - this.work.startDate.getTime();\n              let seconds = Math.floor((this.timer / 1000) % 60);\n              let minutes = Math.floor((this.timer / 1000 / 60) % 60);\n              let hours = Math.floor((this.timer / (1000 * 60 * 60)) % 24);\n              //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n              if (seconds < 10) seconds = '0' + seconds;\n              if (minutes < 10) minutes = '0' + minutes;\n              if (hours < 10) hours = '0' + hours;\n              this.currentTime = hours+':'+minutes+':'+seconds;\n            }\n        ); else {\n          UserService.saveTimer(this.currentUser.id, 0);\n        }\n\n\n      },\n      error => {\n        this.content =\n          (error.response && error.response.data && error.response.data.message) ||\n          error.message ||\n          error.toString();\n      }\n    );\n\n\n    UserService.getTimer(this.currentUser.id).then(\n        response => {\n          this.timer = response.data;\n        }\n    );\n    //\n\n    //\n\n  },\n\n\n  methods: {\n    openEdit(task){\n      if (task === 0) {this.task = {}}\n      else {\n        this.task = {}\n        Object.assign(this.task, task);\n      }\n      this.isHidden = false;\n    },\n    toStart(task){\n      if (task){ //if we choose task from list\n        if (this.current.taskName) {\n          this.toStop();\n          this.current.current = false;\n          UserService.putTask(this.current);\n        }\n        this.currentTime = '00:00:00';\n        this.current = task;\n        this.current.current = true;\n        UserService.putTask(this.current);\n        this.timer = 0;\n        UserService.saveTimer(this.currentUser.id, this.timer);\n      } //continue after break\n\n      if (this.work === '') this.work = {} //i dont know how it became a string\n      this.work.task = this.current;\n      this.work.workStart = new Date();\n      this.work.workEnd = null;\n\n      if (this.checkId != null) clearTimeout(this.checkId);\n      this.checkId = setTimeout(UserService.postWork, 1000, this.work);\n\n      this.timerId = setTimeout(this.countdown, 1);\n    },\n    toStop(){\n      if (this.currentTimer - this.timer > 1000)\n      {\n\n        this.work.workEnd = new Date();\n        this.timer = this.currentTimer;\n\n        UserService.saveTimer(this.currentUser.id, this.timer);\n        UserService.setWorkEnd(this.work);\n\n      }\n\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    },\n    countdown() {\n      this.currentTimer = new Date().getTime() - new Date(this.work.workStart).getTime();\n      this.currentTimer += this.timer;\n      let seconds = Math.floor((this.currentTimer / 1000) % 60);\n      let minutes = Math.floor((this.currentTimer / 1000 / 60) % 60);\n      let hours = Math.floor((this.currentTimer / (1000 * 60 * 60)) % 24);\n      //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n      if (seconds < 10) seconds = '0' + seconds;\n      if (minutes < 10) minutes = '0' + minutes;\n      if (hours < 10) hours = '0' + hours;\n      this.currentTime = hours+':'+minutes+':'+seconds;\n      this.timerId = setTimeout(this.countdown, 1000);\n\n    },\n    post(task){\n      this.tasks.push(task);\n      Object.assign(this.task, task);\n    },\n    put(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id == task.id), 1, task);\n\n    },\n    del(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id === task.id),1);\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/views"}]}