{"remainingRequest":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\Tasks.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\Tasks.vue","mtime":1622222867913},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport UserService from '../services/user.service';\nimport TaskEdit from \"@/views/components/TaskEdit.vue\";\nimport HorizontalScroll from 'vue-horizontal-scroll'\nimport 'vue-horizontal-scroll/dist/vue-horizontal-scroll.css'\n\nexport default {\n  name: 'Tasks',\n  data() {\n    return {\n      isHidden: true,\n      content: '',\n      hover: 0,\n\n      completed: true,\n      overdue: true,\n      inWork: true,\n      findTask: '',\n      interval_start: '',\n      interval_end: '',\n\n      editPerms:[],\n\n      openParents: [],\n      tasks: [],\n      task: {}\n    };\n  },\n  components:{\n    'v-taskEdit' : TaskEdit,\n    'horizontal-scroll' : HorizontalScroll\n  },\n  computed: {\n    parents(){\n      return this.tasks.filter(item => (!item.parent))\n          .filter(item =>\n              (!this.interval_start || new Date(item.task_start).getTime() >= new Date(this.interval_start).getTime()) &&\n              (!this.interval_end || new Date(item.task_end).getTime() <= new Date(this.interval_end).getTime())\n          )\n          .sort(function(f, s) {return f.task_start > s.task_start ? 1 : -1})\n          .filter(item=>item.taskName.toLowerCase().includes(this.findTask.toLowerCase()))\n          .filter(item => ((this.completed || !item.taskComplete) && (this.overdue || item.taskComplete ||  this.formatDate(item.task_end)  >= this.formatDate(new Date())) && (this.inWork || item.taskComplete || this.formatDate(item.task_end) < this.formatDate(new Date()))));\n      //can combine filters\n    },\n    children_task(){\n      return this.tasks.filter(item => (item.parent))\n          .filter(item => ((this.completed || !item.taskComplete) && (this.overdue || item.taskComplete || this.formatDate(item.task_end)  >= this.formatDate(new Date())) && (this.inWork || item.taskComplete || this.formatDate(item.task_end) < this.formatDate(new Date()))))\n          .sort(function(f, s) {return f.task_start > s.task_start ? 1 : -1});\n    },\n    minDate(){\n      return this.parents.length > 0 ? (new Date(this.parents.reduce(function (p, v) {\n        return ( p < v.task_start ? p : v.task_start );\n      }, this.parents[0].task_start))) : 0;\n    },\n    maxDate(){\n      let res = this.parents.length > 0 ? (new Date(this.parents.reduce(function (p, v) {\n        return ( p > v.task_end ? p : v.task_end );\n      }, this.parents[0].task_end))) : 0;\n\n      let buf = 0;\n      if (this.$refs.tasks && res){\n        buf = this.$refs.tasks.clientWidth * 0.7;\n        buf = (buf - buf % 40) / 40;\n        buf -= (res.getTime() - this.minDate.getTime())/86400000;\n        if (buf>0) res.setTime(res.getTime()+buf*86400000);\n      }\n      return res;\n    },\n    tableHeight(){\n      return  50*(1+this.parents.length)+ this.openParents.reduce(function (p, v) {\n        return ( v.isOpen && this.parents.find(item => item.id === v.id) ? p+=(this.children_task.filter(item => (item.parent.id === v.id)).length) : p );\n      }.bind(this), 0)*30+17;\n    },\n    tableWidth(){\n      return (((this.maxDate- this.minDate)/86400000+1)*40);\n    },\n    taskProps(){\n      return task => ({\n        width: ((new Date(task.task_end) - new Date(task.task_start))/86400000+1)*40-30 + 'px',\n        left: ((new Date(task.task_start) - this.minDate)/86400000)*40 + 'px',\n        background: task.taskComplete ? '#66cdaa' : (this.formatDate(task.task_end) < this.formatDate(new Date()) ? '#FF7373' : '#6c7bfe')\n      });\n    },\n    datesList(){\n      if (this.minDate === 0) return [{id: 1, title: 'Задач не найдено', days: []}]\n      let res=[]\n      let id = 1;\n      let i = new Date(this.minDate);\n      for (i; i <= this.maxDate; i.setDate(i.getDate() + 1)) {\n        let obj = {id: 1, title: '', days: []}\n        obj.title = i.toLocaleString('ru', {month: 'short'});\n        if (new Date().getFullYear() != i.getFullYear()) obj.title+=i.getFullYear()\n        while (i <= this.maxDate){\n          obj.days.push(i.getDate());\n          if (i.getDay() === 0) break;\n          i.setDate(i.getDate() + 1);\n        }\n        obj.id = id;\n        id+=1;\n        res.push(obj);\n        //res.push(Object.assign({}, obj));\n      }\n      return res;\n    },\n    formatDate() {\n      return date => {\n        let formDate = new Date(date);\n        let dd = formDate.getDate();\n        if (dd < 10) dd = '0' + dd;\n        let mm = formDate.getMonth() + 1;\n        if (mm < 10) mm = '0' + mm;\n        let yy = formDate.getFullYear();\n        if (yy < 10) yy = '0' + yy;\n        return  yy + '-' + mm + '-' + dd;\n      }\n\n    },\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n\n      return false;\n    }\n  },\n  mounted() {\n    UserService.getTasks().then(\n      response => {\n        this.tasks = response.data;\n        this.tasks.forEach(task =>\n            UserService.getEditPermissions(task.id).then(\n                response => {\n                  if (response.data) this.editPerms.push(task.id);\n                }\n            )\n        )\n      },\n      error => {\n        this.content =\n          (error.response && error.response.data && error.response.data.message) ||\n          error.message ||\n          error.toString();\n      }\n    );\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n  },\n  methods: {\n    test(){\n      // eslint-disable-next-line no-console\n      console.log(this.editPerms);\n    },\n    open(task){\n      let parent = this.openParents.find(item => item.id === task.id);\n      if (parent) {\n        parent.isOpen = !parent.isOpen;\n        this.openParents.splice(this.openParents.findIndex(item => item.id === parent.id), 1, parent);\n      } else {\n        this.openParents.push({id: task.id, isOpen: true})\n      }\n    },\n    children(parent){\n      return this.children_task.filter(item => (item.parent.id === parent.id))\n    },\n    children_open(parent){\n      if (this.openParents.find(item => item.id === parent.id) &&\n          this.openParents.find(item => item.id === parent.id).isOpen){\n        return this.children(parent);\n      }\n      else return [];\n    },\n    openEdit(task){\n      if (task === 0) {this.task = {}}\n      else {\n        this.task = {}\n        Object.assign(this.task, task);\n      }\n      this.isHidden = false;\n\n    },\n    post(task){\n      this.tasks.push(task);\n      Object.assign(this.task, task);\n      this.editPerms.push(task.id);\n      if (task.parent && !task.taskComplete) this.parents.find(item => item.id == task.parent.id).taskComplete = false;\n    },\n    put(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id == task.id), 1, task);\n      if (this.children(task).length > 0){\n        this.children(task).forEach(item => {\n          if (task.taskComplete) item.taskComplete = true;\n          if (this.formatDate(task.task_start) > this.formatDate(item.task_end) || this.formatDate(task.task_end) < this.formatDate(item.task_start)) {\n            this.del(item);\n          } else {\n            if (this.formatDate(task.task_start) > this.formatDate(item.task_start)) item.task_start = task.task_start;\n            if (this.formatDate(task.task_end) < this.formatDate(item.task_end)) item.task_end = task.task_end;\n          }\n          item.parent = task;\n        })\n      } else {\n        if (task.parent && !task.taskComplete) this.parents.find(item => item.id == task.parent.id).taskComplete = false;\n      }\n\n    },\n    del(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id === task.id),1);\n      this.editPerms.splice(this.editPerms.findIndex(item => item.id === task.id),1);\n    }\n  }\n};\n",{"version":3,"sources":["Tasks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Tasks.vue","sourceRoot":"src/views","sourcesContent":["<style scoped>\nh3{\n  margin: 0 20px 0 0;\n}\n</style>\n<template>\n  <div class=\"container\">\n    <v-taskEdit v-if='!isHidden' v-on:hide=\"isHidden = true\"\n                :task=\"task\" :post=\"post\" :put=\"put\" :del=\"del\"></v-taskEdit>\n\n    <div v-if=\"currentUser\" class=\"user-menu\">\n        <li>\n          <router-link to=\"/today\">To Do</router-link>\n        </li>\n        <li>\n          <router-link to=\"/tasks\" class=\"active\" @click.prevent>Задачи</router-link>\n        </li>\n        <li>\n          <router-link to=\"/statistics\">Статистика</router-link>\n        </li>\n        <li>\n          <router-link to=\"/projects\">Проекты</router-link>\n        </li>\n        <li>\n          <router-link to=\"/profile\">Мой профиль</router-link>\n        </li>\n        <li v-if=\"isUserManager && false\">\n          <router-link to=\"/mod\">Панель модератора</router-link>\n        </li>\n        <li v-if=\"isUserAdmin\">\n          <router-link to=\"/admin\">Панель администратора</router-link>\n        </li>\n      </div>\n    <div class=\"content\">\n      <div class=\"action\">\n        <router-link to=\"/profile\">\n          <h2 style=\"margin: 0\">{{ currentUser.username }}</h2>\n        </router-link>\n      </div>\n      <h1>Задачи</h1>\n      <div v-if=\"content\" class=\"row\">\n        Упс, {{content}}\n      </div>\n      <div class=\"column\">\n        <div class=\"row\" style=\"margin-bottom: 0\">\n          <input type=\"checkbox\" checked v-model=\"completed\"><h3>Выполненные</h3>\n          <input type=\"checkbox\" checked v-model=\"overdue\"><h3>Просроченные</h3>\n          <input type=\"checkbox\" checked v-model=\"inWork\"><h3>В работе</h3>\n        </div>\n        <div class=\"row\">\n          <h3 style=\"margin-right: 10px\">Показать с: </h3>\n          <input class=\"date\" type=\"date\" v-model=\"interval_start\" min=\"2015-01-01\" max=\"2030-01-01\"/>\n          <h3 style=\"margin-right: 10px\">до: </h3>\n          <input class=\"date\" type=\"date\" v-model=\"interval_end\" min=\"2015-01-01\" max=\"2030-01-01\"/>\n          <div class=\"button-g\" @click=\"interval_start=interval_end=''\">Сбросить</div>\n        </div>\n      </div>\n\n      <!--   WATERFALL-->\n      <div class=\"row tasks\" ref=\"tasks\" style=\"align-items: flex-start\">\n        <div class=\"task-table\">\n          <div class=\"row-in-table\"><div class=\"task-in-table\"><h3>Поиск: </h3>\n            <input type=\"text\" maxlength=\"30\" v-autowidth=\"{maxWidth: '200px', minWidth: '100px', comfortZone: 0}\" v-model=\"findTask\" style=\"font-size:16px\"/></div>\n          </div>\n          <div class=\"row-in-table\" v-for=\"task in parents\" :key=\"task.id\">\n            <div style=\"display: flex; justify-content: space-between; align-items: center;\"\n                 v-bind:class=\"[hover === task.id ? 'hover' : '']\" @mouseover='hover = task.id' @mouseout=\"hover = 0\">\n              <div class=\"arrow-btn\" v-bind:class=\"[children(task).length === 0 ? 'hidden' : '','arrow-btn']\"\n                   v-bind:style=\"{transform: children_open(task).length === 0 ? 'rotate(0.0turn)' : 'rotate(0.25turn)'}\"\n                   @click=\"open(task)\"></div>\n              <div class=\"task-in-table\" @click=\"openEdit(task)\">\n                <div>\n                  {{ task.taskName }}\n                </div>\n              </div>\n              <div v-if=\"editPerms.includes(task.id)\" class=\"plus-btn\" @click=\"openEdit({parent: task})\" data-content=\"Добавить подзадачу\"></div>\n\n            </div>\n            <div class=\"task-in-table subtask-in-table\" v-for=\"child_task in children_open(task) \" :key=\"child_task.id\"\n                 v-bind:class=\"[hover === child_task.id ? 'hover' : '']\" @mouseover='hover = child_task.id' @mouseout=\"hover = 0\"\n                 @click=\"openEdit(child_task)\">\n              {{child_task.taskName}}\n            </div>\n          </div>\n          <div class=\"button-s\" @click=\"openEdit(0)\"\n               style=\"width: auto; margin-right: 0px; margin-left: -1px; border-radius: 0 0 0 5px;\">\n            Добавить задачу\n          </div>\n        </div>\n        <horizontal-scroll class=\"horizontal-scroll\" ref=\"table\" v-bind:style=\"{height: tableHeight + 'px'}\">\n          <div class=\"table\" v-bind:style=\"{width: tableWidth + 'px'}\">\n\n            <div class=\"main-table-row\"><div class=\"table-row\">\n              <div v-bind:class=\"[date.title == 'Задач не найдено' ? 'row' : 'dates']\" v-for=\"date in datesList\" :key=\"date.id\">\n                {{ date.title }}\n                <div>\n                  <div style=\"width: 40px\" v-for=\"day in date.days\" :key=\"day\">{{day}}</div>\n                </div>\n              </div>\n            </div></div>\n            <div class=\"main-table-row\" v-for=\"task in parents\" :key=\"task.id\">\n              <div class=\"table-row\" v-bind:class=\"[hover === task.id ? 'hover' : '']\" @mouseover='hover = task.id' @mouseout=\"hover = 0\">\n                <div class=\"table-task\" v-bind:style=\"taskProps(task)\" @click=\"openEdit(task)\">{{ task.taskName }}</div>\n              </div>\n              <div class=\"table-row table-subrow\" v-for=\"child_task in children_open(task) \" :key=\"child_task.id\"\n                   v-bind:class=\"[hover === child_task.id ? 'hover' : '']\" @mouseover='hover = child_task.id' @mouseout=\"hover = 0\">\n                <div class=\"table-task\" v-bind:style=\"taskProps(child_task)\" @click=\"openEdit(child_task)\">{{ child_task.taskName }}</div>\n              </div>\n            </div>\n          </div>\n        </horizontal-scroll>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport UserService from '../services/user.service';\nimport TaskEdit from \"@/views/components/TaskEdit.vue\";\nimport HorizontalScroll from 'vue-horizontal-scroll'\nimport 'vue-horizontal-scroll/dist/vue-horizontal-scroll.css'\n\nexport default {\n  name: 'Tasks',\n  data() {\n    return {\n      isHidden: true,\n      content: '',\n      hover: 0,\n\n      completed: true,\n      overdue: true,\n      inWork: true,\n      findTask: '',\n      interval_start: '',\n      interval_end: '',\n\n      editPerms:[],\n\n      openParents: [],\n      tasks: [],\n      task: {}\n    };\n  },\n  components:{\n    'v-taskEdit' : TaskEdit,\n    'horizontal-scroll' : HorizontalScroll\n  },\n  computed: {\n    parents(){\n      return this.tasks.filter(item => (!item.parent))\n          .filter(item =>\n              (!this.interval_start || new Date(item.task_start).getTime() >= new Date(this.interval_start).getTime()) &&\n              (!this.interval_end || new Date(item.task_end).getTime() <= new Date(this.interval_end).getTime())\n          )\n          .sort(function(f, s) {return f.task_start > s.task_start ? 1 : -1})\n          .filter(item=>item.taskName.toLowerCase().includes(this.findTask.toLowerCase()))\n          .filter(item => ((this.completed || !item.taskComplete) && (this.overdue || item.taskComplete ||  this.formatDate(item.task_end)  >= this.formatDate(new Date())) && (this.inWork || item.taskComplete || this.formatDate(item.task_end) < this.formatDate(new Date()))));\n      //can combine filters\n    },\n    children_task(){\n      return this.tasks.filter(item => (item.parent))\n          .filter(item => ((this.completed || !item.taskComplete) && (this.overdue || item.taskComplete || this.formatDate(item.task_end)  >= this.formatDate(new Date())) && (this.inWork || item.taskComplete || this.formatDate(item.task_end) < this.formatDate(new Date()))))\n          .sort(function(f, s) {return f.task_start > s.task_start ? 1 : -1});\n    },\n    minDate(){\n      return this.parents.length > 0 ? (new Date(this.parents.reduce(function (p, v) {\n        return ( p < v.task_start ? p : v.task_start );\n      }, this.parents[0].task_start))) : 0;\n    },\n    maxDate(){\n      let res = this.parents.length > 0 ? (new Date(this.parents.reduce(function (p, v) {\n        return ( p > v.task_end ? p : v.task_end );\n      }, this.parents[0].task_end))) : 0;\n\n      let buf = 0;\n      if (this.$refs.tasks && res){\n        buf = this.$refs.tasks.clientWidth * 0.7;\n        buf = (buf - buf % 40) / 40;\n        buf -= (res.getTime() - this.minDate.getTime())/86400000;\n        if (buf>0) res.setTime(res.getTime()+buf*86400000);\n      }\n      return res;\n    },\n    tableHeight(){\n      return  50*(1+this.parents.length)+ this.openParents.reduce(function (p, v) {\n        return ( v.isOpen && this.parents.find(item => item.id === v.id) ? p+=(this.children_task.filter(item => (item.parent.id === v.id)).length) : p );\n      }.bind(this), 0)*30+17;\n    },\n    tableWidth(){\n      return (((this.maxDate- this.minDate)/86400000+1)*40);\n    },\n    taskProps(){\n      return task => ({\n        width: ((new Date(task.task_end) - new Date(task.task_start))/86400000+1)*40-30 + 'px',\n        left: ((new Date(task.task_start) - this.minDate)/86400000)*40 + 'px',\n        background: task.taskComplete ? '#66cdaa' : (this.formatDate(task.task_end) < this.formatDate(new Date()) ? '#FF7373' : '#6c7bfe')\n      });\n    },\n    datesList(){\n      if (this.minDate === 0) return [{id: 1, title: 'Задач не найдено', days: []}]\n      let res=[]\n      let id = 1;\n      let i = new Date(this.minDate);\n      for (i; i <= this.maxDate; i.setDate(i.getDate() + 1)) {\n        let obj = {id: 1, title: '', days: []}\n        obj.title = i.toLocaleString('ru', {month: 'short'});\n        if (new Date().getFullYear() != i.getFullYear()) obj.title+=i.getFullYear()\n        while (i <= this.maxDate){\n          obj.days.push(i.getDate());\n          if (i.getDay() === 0) break;\n          i.setDate(i.getDate() + 1);\n        }\n        obj.id = id;\n        id+=1;\n        res.push(obj);\n        //res.push(Object.assign({}, obj));\n      }\n      return res;\n    },\n    formatDate() {\n      return date => {\n        let formDate = new Date(date);\n        let dd = formDate.getDate();\n        if (dd < 10) dd = '0' + dd;\n        let mm = formDate.getMonth() + 1;\n        if (mm < 10) mm = '0' + mm;\n        let yy = formDate.getFullYear();\n        if (yy < 10) yy = '0' + yy;\n        return  yy + '-' + mm + '-' + dd;\n      }\n\n    },\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n\n      return false;\n    }\n  },\n  mounted() {\n    UserService.getTasks().then(\n      response => {\n        this.tasks = response.data;\n        this.tasks.forEach(task =>\n            UserService.getEditPermissions(task.id).then(\n                response => {\n                  if (response.data) this.editPerms.push(task.id);\n                }\n            )\n        )\n      },\n      error => {\n        this.content =\n          (error.response && error.response.data && error.response.data.message) ||\n          error.message ||\n          error.toString();\n      }\n    );\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n  },\n  methods: {\n    test(){\n      // eslint-disable-next-line no-console\n      console.log(this.editPerms);\n    },\n    open(task){\n      let parent = this.openParents.find(item => item.id === task.id);\n      if (parent) {\n        parent.isOpen = !parent.isOpen;\n        this.openParents.splice(this.openParents.findIndex(item => item.id === parent.id), 1, parent);\n      } else {\n        this.openParents.push({id: task.id, isOpen: true})\n      }\n    },\n    children(parent){\n      return this.children_task.filter(item => (item.parent.id === parent.id))\n    },\n    children_open(parent){\n      if (this.openParents.find(item => item.id === parent.id) &&\n          this.openParents.find(item => item.id === parent.id).isOpen){\n        return this.children(parent);\n      }\n      else return [];\n    },\n    openEdit(task){\n      if (task === 0) {this.task = {}}\n      else {\n        this.task = {}\n        Object.assign(this.task, task);\n      }\n      this.isHidden = false;\n\n    },\n    post(task){\n      this.tasks.push(task);\n      Object.assign(this.task, task);\n      this.editPerms.push(task.id);\n      if (task.parent && !task.taskComplete) this.parents.find(item => item.id == task.parent.id).taskComplete = false;\n    },\n    put(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id == task.id), 1, task);\n      if (this.children(task).length > 0){\n        this.children(task).forEach(item => {\n          if (task.taskComplete) item.taskComplete = true;\n          if (this.formatDate(task.task_start) > this.formatDate(item.task_end) || this.formatDate(task.task_end) < this.formatDate(item.task_start)) {\n            this.del(item);\n          } else {\n            if (this.formatDate(task.task_start) > this.formatDate(item.task_start)) item.task_start = task.task_start;\n            if (this.formatDate(task.task_end) < this.formatDate(item.task_end)) item.task_end = task.task_end;\n          }\n          item.parent = task;\n        })\n      } else {\n        if (task.parent && !task.taskComplete) this.parents.find(item => item.id == task.parent.id).taskComplete = false;\n      }\n\n    },\n    del(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id === task.id),1);\n      this.editPerms.splice(this.editPerms.findIndex(item => item.id === task.id),1);\n    }\n  }\n};\n</script>\n"]}]}