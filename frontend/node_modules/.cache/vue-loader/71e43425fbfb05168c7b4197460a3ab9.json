{"remainingRequest":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\BoardAdmin.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\BoardAdmin.vue","mtime":1622576950361},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport UserService from '../services/user.service';\n\nexport default {\n  name: 'Admin',\n  data() {\n    return {\n      content: '',\n      message: '',\n\n      users: [],\n      selected: [],\n      findUser: '',\n\n      showProjects: false,\n      projects: [],\n\n      allUsers: 0\n    };\n  },\n  computed: {\n    hasRole(){\n      if (this.user.roles.find(item => item.id == 2)) return 2;\n      if (this.user.roles.find(item => item.id == 3)) return 3;\n      if (this.user.roles.find(item => item.id == 1)) return 1;\n      return 0;\n\n    },\n    allowToEdit(){\n      return this.user.roles.find(item => item.id == 2)\n    },\n    user(){\n      if (this.selected.length > 0){\n        return this.users.find(item => item.email == this.selected[0]);\n      } else return {};\n    },\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n\n      return false;\n    }\n  },\n  mounted() {\n    UserService.getAllProjects().then(\n        response => {\n          this.projects = response.data;\n\n        },\n        error => {\n          this.content =\n              (error.response && error.response.data && error.response.data.message) ||\n              error.message ||\n              error.toString();\n        }\n    );\n    UserService.countUsers().then(\n        response => {\n          this.allUsers = response.data;\n        },\n        error => {\n          this.content =\n              (error.response && error.response.data && error.response.data.message) ||\n              error.message ||\n              error.toString();\n        }\n    );\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n  },\n  methods: {\n    link(id){\n      this.$router.push('/project/' + id);\n    },\n    del(id){\n      this.projects.splice(this.projects.findIndex(item => item.id == id),1);\n      UserService.delProject(id);\n    },\n\n    changeRole(role){\n      this.user.roles.splice(0, this.user.roles.length, role);\n      UserService.changeRoles(this.user);\n    },\n    delUser(){\n      UserService.delUser(this.user).then(\n          response => {\n            response.data;\n            this.message = 'Пользователь удален!';\n            this.findUsers();\n            this.allUsers = this.allUsers-1;\n          },\n          error => {//probably not needed\n            this.message =\n                (error.response && error.response.data && error.response.data.message) ||\n                error.message ||\n                error.toString();\n          }\n      );\n    },\n    findUsers(){\n      if (this.findUser){\n        UserService.getUsersByEmail(this.findUser).then(\n            response => {\n              this.message = '';\n              this.users = response.data\n              this.selected = [];\n            },\n            error => {//probably not needed\n              this.message =\n                  (error.response && error.response.data && error.response.data.message) ||\n                  error.message ||\n                  error.toString();\n            }\n        );\n      } else{\n        this.selected = [];\n        this.users = [];\n      }\n    }\n  }\n};\n",{"version":3,"sources":["BoardAdmin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"BoardAdmin.vue","sourceRoot":"src/views","sourcesContent":["<style scoped>\n\n</style>\n<template>\n  <div class=\"container\">\n      <div v-if=\"currentUser\" class=\"user-menu\">\n        <li>\n          <router-link to=\"/today\">To Do</router-link>\n        </li>\n        <li>\n          <router-link to=\"/tasks\">Задачи</router-link>\n        </li>\n        <li>\n          <router-link to=\"/statistics\">Статистика</router-link>\n        </li>\n        <li>\n          <router-link to=\"/projects\">Проекты</router-link>\n        </li>\n        <li>\n          <router-link to=\"/profile\">Мой профиль</router-link>\n        </li>\n        <li v-if=\"isUserManager && false\">\n          <router-link to=\"/mod\">Панель модератора</router-link>\n        </li>\n        <li v-if=\"isUserAdmin\">\n          <router-link to=\"/admin\" class=\"active\" @click.prevent>Панель администратора</router-link>\n        </li>\n      </div>\n    <div class=\"content\">\n      <div class=\"action\">\n        <router-link to=\"/profile\">\n          <h2 style=\"margin: 0\">{{ currentUser.username }}</h2>\n        </router-link>\n      </div>\n      <h1>Панель администратора</h1>\n      <div v-if=\"content\" class=\"row\">\n        Упс, {{content}}\n      </div>\n      <div class=\"row\" style=\"align-items: flex-start\">\n        <div class=\"column\" style=\"max-width: 400px\">\n          <input class=\"select\" type=\"text\" maxlength=\"50\" v-autowidth=\"{maxWidth: '400px', minWidth: '300px', comfortZone: 0}\"\n                 v-model=\"findUser\" v-on:input=\"findUsers\" />\n          <select class=\"select\" v-model=\"selected\" multiple v-bind:size=\"users.length > 0 ? users.length < 6 ? users.length : 5: 1\" style=\"margin-top: -2px\">\n            <option v-for=\"user in users\" :key=\"user.id\">{{user.email}}</option>\n          </select>\n        </div>\n        <div class=\"column\" style=\"flex-grow: 1\">\n          <div class=\"task\" style=\"cursor: auto; flex-grow: 1; width: auto\" v-if=\"user.username\">{{user.username}} - {{user.email}}</div>\n          <div class=\"task\" style=\"cursor: auto; flex-grow: 1; width: auto\" v-else>Пользователь не выбран</div>\n\n          <div class=\"row\" v-if=\"user.username\">\n            <button @click=\"changeRole({id: 1})\" v-bind:class=\"[hasRole === 1 ? 'button-g' : 'button-b']\" style=\"width: auto\">Исполнитель</button>\n            <button @click=\"changeRole({id: 3})\" v-bind:class=\"[hasRole === 3 ? 'button-g' : 'button-b']\" style=\"width: auto\">Менеджер</button>\n            <button @click=\"changeRole({id: 2})\" v-bind:class=\"[hasRole === 2 ? 'button-g' : 'button-b']\" style=\"width: auto\">Администратор</button>\n          </div>\n          <div class=\"row\" style=\"margin-top: 0\" v-if=\"user.username\">\n            <button @click=\"delUser\"  class=\"button-r\" style=\"width: auto\">Удалить пользователя</button>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <h2 style=\"margin-right: 30px\">Все проекты</h2>\n        <div v-if=\"!showProjects\" @click=\"showProjects = true\" class=\"button-g\">Показать</div>\n        <div v-if=\"showProjects\" @click=\"showProjects = false\" class=\"button-g\">Скрыть</div>\n      </div>\n      <div v-if=\"showProjects\">\n        <div v-if=\"projects.length <= 0\" class=\"task\" style=\"cursor: auto\">Пока в системе нет проектов</div>\n        <div class=\"row\" v-for=\"project in projects\" :key=\"project.id\">\n          <div class=\"task\"  @click=\"link(project.id)\">{{ project.name }}</div>\n          <button class=\"button-r\" @click=\"del(project.id)\" style=\"width: auto\">Удалить</button>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <h2 style=\"margin-right: 30px\">Пользователей в системе:</h2>\n        <h2>{{allUsers}}</h2>\n      </div>\n\n\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport UserService from '../services/user.service';\n\nexport default {\n  name: 'Admin',\n  data() {\n    return {\n      content: '',\n      message: '',\n\n      users: [],\n      selected: [],\n      findUser: '',\n\n      showProjects: false,\n      projects: [],\n\n      allUsers: 0\n    };\n  },\n  computed: {\n    hasRole(){\n      if (this.user.roles.find(item => item.id == 2)) return 2;\n      if (this.user.roles.find(item => item.id == 3)) return 3;\n      if (this.user.roles.find(item => item.id == 1)) return 1;\n      return 0;\n\n    },\n    allowToEdit(){\n      return this.user.roles.find(item => item.id == 2)\n    },\n    user(){\n      if (this.selected.length > 0){\n        return this.users.find(item => item.email == this.selected[0]);\n      } else return {};\n    },\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n\n      return false;\n    }\n  },\n  mounted() {\n    UserService.getAllProjects().then(\n        response => {\n          this.projects = response.data;\n\n        },\n        error => {\n          this.content =\n              (error.response && error.response.data && error.response.data.message) ||\n              error.message ||\n              error.toString();\n        }\n    );\n    UserService.countUsers().then(\n        response => {\n          this.allUsers = response.data;\n        },\n        error => {\n          this.content =\n              (error.response && error.response.data && error.response.data.message) ||\n              error.message ||\n              error.toString();\n        }\n    );\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n  },\n  methods: {\n    link(id){\n      this.$router.push('/project/' + id);\n    },\n    del(id){\n      this.projects.splice(this.projects.findIndex(item => item.id == id),1);\n      UserService.delProject(id);\n    },\n\n    changeRole(role){\n      this.user.roles.splice(0, this.user.roles.length, role);\n      UserService.changeRoles(this.user);\n    },\n    delUser(){\n      UserService.delUser(this.user).then(\n          response => {\n            response.data;\n            this.message = 'Пользователь удален!';\n            this.findUsers();\n            this.allUsers = this.allUsers-1;\n          },\n          error => {//probably not needed\n            this.message =\n                (error.response && error.response.data && error.response.data.message) ||\n                error.message ||\n                error.toString();\n          }\n      );\n    },\n    findUsers(){\n      if (this.findUser){\n        UserService.getUsersByEmail(this.findUser).then(\n            response => {\n              this.message = '';\n              this.users = response.data\n              this.selected = [];\n            },\n            error => {//probably not needed\n              this.message =\n                  (error.response && error.response.data && error.response.data.message) ||\n                  error.message ||\n                  error.toString();\n            }\n        );\n      } else{\n        this.selected = [];\n        this.users = [];\n      }\n    }\n  }\n};\n</script>\n"]}]}