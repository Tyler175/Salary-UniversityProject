{"remainingRequest":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\src\\views\\Project.vue?vue&type=style&index=0&id=55fa6d4f&scoped=true&lang=css&","dependencies":[{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\src\\views\\Project.vue","mtime":1634772343679},{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Вуз\\ТехнРазПО\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nh3{\n  margin: 0 20px 0 0;\n}\n",{"version":3,"sources":["Project.vue"],"names":[],"mappings":";AACA;AACA;AACA","file":"Project.vue","sourceRoot":"src/views","sourcesContent":["<style scoped>\nh3{\n  margin: 0 20px 0 0;\n}\n</style>\n<template>\n  <div class=\"container\">\n\n    <div v-if=\"currentUser\" class=\"user-menu\">\n        <li>\n          <router-link to=\"/today\">To Do</router-link>\n        </li>\n        <li>\n          <router-link to=\"/tasks\">Задачи</router-link>\n        </li>\n        <li>\n          <router-link to=\"/statistics\">Статистика</router-link>\n        </li>\n        <li>\n          <router-link to=\"/projects\" class=\"active\" @click.prevent>Проекты</router-link>\n        </li>\n        <li>\n          <router-link to=\"/profile\">Мой профиль</router-link>\n        </li>\n        <li v-if=\"isUserManager && false\">\n          <router-link to=\"/mod\">Панель модератора</router-link>\n        </li>\n        <li v-if=\"isUserAdmin\">\n          <router-link to=\"/admin\">Панель администратора</router-link>\n        </li>\n      </div>\n\n    <div class=\"content\">\n      <div class=\"action\">\n        <router-link to=\"/profile\">\n          <h2 style=\"margin: 0\">{{ currentUser.username }}</h2>\n        </router-link>\n      </div>\n      <div class=\"form\" style=\"margin-top: 50px\" v-if=\"areAllowed\"> <!--areAllowed if workerInfos are allowed to-->\n        <h2>Проект не найден</h2>\n      </div>\n      <div v-else>\n        <v-taskEdit v-if='!isHidden' v-on:hide=\"isHidden = true\"\n                    :task=\"task\" :post=\"post_task\" :put=\"put_task\" :del=\"del_task\" :option=\"'project'\" :employes=\"this.project.workerInfos\"></v-taskEdit>\n        <div class=\"row\">\n          <input v-bind:disabled=\"!isManager\" type=\"text\" maxlength=\"30\" v-autowidth=\"{maxWidth: '700px', minWidth: '20px', comfortZone: 0}\"\n                 class=\"h1\" style=\"margin-right: 30px; margin-bottom: 0\"\n                 v-model=\"project.name\" v-on:input=\"changeName\" />\n        </div>\n        <div class=\"row\">\n          <div v-if=\"isManager\" @click=\"active = 0\" v-bind:class=\"[active === 0 ? 'button-g' : 'button-b']\">Задачи</div>\n          <div v-if=\"isManager\" @click=\"active = 1\" v-bind:class=\"[active === 1 ? 'button-g' : 'button-b']\">Статистика</div>\n          <div v-if=\"isManager\" @click=\"active = 2\" v-bind:class=\"[active === 2 ? 'button-g' : 'button-b']\">Команда</div>\n        </div>\n        <div v-if=\"content\" class=\"row\">\n          <h3>Упс, {{content}}</h3>\n        </div>\n        <!--Задачи-->\n        <div v-if=\"active === 0\">\n          <div class=\"column\">\n            <div class=\"row\" style=\"margin-bottom: 0\">\n              <input type=\"checkbox\" checked v-model=\"completed\"><h3>Выполненные</h3>\n              <input type=\"checkbox\" checked v-model=\"overdue\"><h3>Просроченные</h3>\n              <input type=\"checkbox\" checked v-model=\"inWork\"><h3>В работе</h3>\n            </div>\n            <div class=\"row\">\n              <h3 style=\"margin-right: 10px\">Показать с: </h3>\n              <input class=\"date\" type=\"date\" v-model=\"interval_start\" min=\"2015-01-01\" max=\"2030-01-01\"/>\n              <h3 style=\"margin-right: 10px\">до: </h3>\n              <input class=\"date\" type=\"date\" v-model=\"interval_end\" min=\"2015-01-01\" max=\"2030-01-01\"/>\n              <div class=\"button-g\" @click=\"interval_start=interval_end=''\">Сбросить</div>\n            </div>\n          </div>\n\n\n          <div class=\"row tasks\" ref=\"tasks\" style=\"align-items: flex-start\">\n            <div class=\"task-table\">\n              <div class=\"row-in-table\"><div class=\"task-in-table\"><h3>Поиск: </h3>\n                <input type=\"text\" maxlength=\"30\" v-autowidth=\"{maxWidth: '200px', minWidth: '100px', comfortZone: 0}\" v-model=\"findTask\" style=\"font-size:16px\"/></div>\n              </div>\n              <div class=\"row-in-table\" v-for=\"task in parents\" :key=\"task.id\">\n                <div style=\"display: flex; justify-content: space-between; align-items: center;\"\n                     v-bind:class=\"[hover === task.id ? 'hover' : '']\" @mouseover='hover = task.id' @mouseout=\"hover = 0\">\n                  <div class=\"arrow-btn\" v-bind:class=\"[children(task).length === 0 ? 'hidden' : '','arrow-btn']\"\n                       v-bind:style=\"{transform: children_open(task).length === 0 ? 'rotate(0.0turn)' : 'rotate(0.25turn)'}\"\n                       @click=\"open(task)\"></div>\n                    <div class=\"task-in-table\" @click=\"openEdit(task)\">\n                      <div>\n                        {{ task.taskName }}\n                      </div>\n                    </div>\n                    <div v-if=\"isManager\" class=\"plus-btn\" @click=\"openEdit({parent: task})\" data-content=\"Добавить подзадачу\"></div>\n\n                </div>\n                <div class=\"task-in-table subtask-in-table\" v-for=\"child_task in children_open(task) \" :key=\"child_task.id\"\n                     v-bind:class=\"[hover === child_task.id ? 'hover' : '']\" @mouseover='hover = child_task.id' @mouseout=\"hover = 0\"\n                     @click=\"openEdit(child_task)\">\n                  {{child_task.taskName}}\n                </div>\n              </div>\n              <div v-if=\"isManager\" class=\"button-s\" @click=\"openEdit(0)\"\n                   style=\"width: auto; margin-right: 0px; margin-left: -1px; border-radius: 0 0 0 5px;\">\n                Добавить задачу\n              </div>\n            </div>\n            <horizontal-scroll class=\"horizontal-scroll\" ref=\"table\" v-bind:style=\"{height: tableHeight + 'px'}\">\n              <div class=\"table\" v-bind:style=\"{width: tableWidth + 'px'}\">\n\n                <div class=\"main-table-row\"><div class=\"table-row\">\n                  <div v-bind:class=\"[date.title == 'Задач не найдено' ? 'row' : 'dates']\" v-for=\"date in datesList\" :key=\"date.id\">\n                    {{ date.title }}\n                    <div>\n                      <div style=\"width: 40px\" v-for=\"day in date.days\" :key=\"day\">{{day}}</div>\n                    </div>\n                  </div>\n                </div></div>\n                <div class=\"main-table-row\" v-for=\"task in parents\" :key=\"task.id\">\n                  <div class=\"table-row\" v-bind:class=\"[hover === task.id ? 'hover' : '']\" @mouseover='hover = task.id' @mouseout=\"hover = 0\">\n                    <div class=\"table-task\" v-bind:style=\"taskProps(task)\" @click=\"openEdit(task)\">{{ task.taskName }}</div>\n                  </div>\n                  <div class=\"table-row table-subrow\" v-for=\"child_task in children_open(task) \" :key=\"child_task.id\"\n                       v-bind:class=\"[hover === child_task.id ? 'hover' : '']\" @mouseover='hover = child_task.id' @mouseout=\"hover = 0\">\n                    <div class=\"table-task\" v-bind:style=\"taskProps(child_task)\" @click=\"openEdit(child_task)\">{{ child_task.taskName }}</div>\n                  </div>\n                </div>\n              </div>\n            </horizontal-scroll>\n          </div>\n        </div>\n        <!--Статистика-->\n        <div v-else-if=\"active === 1\">\n          <v-stat :project=\"project\"></v-stat>\n        </div>\n        <!--Команда-->\n        <div v-else>\n          <div v-if=\"isManager\">\n            <div class=\"row\"><h2 style=\"margin-bottom: 5px\">Приглашения</h2></div>\n            <v-invRow v-for=\"user in project.invitations\" :key=\"user.id\" :user=\"user\" :action=\"delInv\"></v-invRow>\n\n            <div class=\"row\">\n              <div class=\"column\">\n                <input class=\"select\" type=\"text\" maxlength=\"50\" v-autowidth=\"{maxWidth: '400px', minWidth: '300px', comfortZone: 0}\"\n                       v-model=\"findUser\" v-on:input=\"findUsers\" />\n                <select class=\"select\" v-model=\"selected\" multiple v-bind:size=\"users.length > 0 ? users.length < 6 ? users.length : 5: 1\" style=\"margin-top: -2px\">\n                  <option v-for=\"user in users\" :key=\"user.id\">{{user.username}} - {{user.email}}</option>\n                </select>\n              </div>\n              <div class=\"button-b\" style=\"width: auto\" @click=\"addInv\">Пригласить {{selected[0]}}</div>\n            </div>\n          </div>\n          <h2>Сотрудники</h2>\n          <input class=\"select\" type=\"text\" maxlength=\"50\" v-autowidth=\"{maxWidth: '400px', minWidth: '300px', comfortZone: 0}\" v-model=\"sortM\"/>\n          <div class=\"row\" v-for=\"workerInfo in workerInfos\" :key=\"workerInfo.id\">\n            <div class=\"task\" style=\"cursor: auto\">{{workerInfo.username}} - {{workerInfo.email}}</div>\n            <div class=\"button-r\" @click=\"delWorker(workerInfo)\">Удалить</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport UserService from '../services/user.service';\nimport InvRow from \"@/views/components/InvRow\";\nimport TaskEdit from \"@/views/components/TaskEdit\";\nimport Stat from \"@/views/components/Stat\";\nimport HorizontalScroll from 'vue-horizontal-scroll'\nimport 'vue-horizontal-scroll/dist/vue-horizontal-scroll.css'\n\n\nexport default {\n  name: 'Projects',\n  data() {\n    return {\n      content: '',\n      active: 0,\n      hover: 0,\n\n      completed: true,\n      overdue: true,\n      inWork: true,\n      findTask: '',\n      interval_start: '',\n      interval_end: '',\n\n      tasks:[],\n      task:{},\n      openParents: [],\n      isHidden: true,\n\n\n      selected: [],\n      findUser: '',\n      users: [],\n\n      project: {\n        owner: {},\n        managers: [],\n        workerInfos: [],\n        invitations: [],\n      },\n\n      sortW: '',\n      sortM: ''\n    };\n  },\n  components:{\n    'v-invRow' : InvRow,\n    'horizontal-scroll' : HorizontalScroll,\n    'v-taskEdit' : TaskEdit,\n    'v-stat' : Stat\n  },\n  computed: {\n    parents(){\n      if (!this.project.tasks) return [];\n      return this.project.tasks.filter(item => (!item.parent))\n          .filter(item =>\n              (!this.interval_start || new Date(item.task_start).getTime() >= new Date(this.interval_start).getTime()) &&\n              (!this.interval_end || new Date(item.task_end).getTime() <= new Date(this.interval_end).getTime())\n          )\n          .sort(function(f, s) {return f.task_start > s.task_start ? 1 : -1})\n          .filter(item=>item.taskName.toLowerCase().includes(this.findTask.toLowerCase()))\n          .filter(item => ((this.completed || !item.taskComplete) && (this.overdue || item.taskComplete || new Date(item.task_end).getTime() > new Date().getTime()) && (this.inWork || item.taskComplete || new Date(item.task_end).getTime() < new Date().getTime())));\n    },\n    children_task(){\n      return this.project.tasks.filter(item => (item.parent))\n          .filter(item => ((this.completed || !item.taskComplete) && (this.overdue || item.taskComplete || new Date(item.task_end).getTime() > new Date().getTime()) && (this.inWork || item.taskComplete || new Date(item.task_end).getTime() < new Date().getTime())))\n          .sort(function(f, s) {return f.task_start > s.task_start ? 1 : -1});\n    },\n    /*\n    items () {\n      return this.project.workerInfos.map(function (item) {\n        return {user: item, list: 1}\n      }).concat(this.project.managers.map(function (item) {\n        return {user: item, list: 2}\n      }))\n    },\n    listOne () {\n      return this.items.filter(item => (item.list === 1 && (item.user.username.toLowerCase().includes(this.sortW.toLowerCase()) || item.user.email.toLowerCase().includes(this.sortW.toLowerCase()) )))\n    },\n    listTwo () {\n      return this.items.filter(item => (item.list === 2 && (item.user.username.toLowerCase().includes(this.sortM.toLowerCase()) || item.user.email.toLowerCase().includes(this.sortM.toLowerCase()) )))\n    },\n    */\n    workerInfos(){\n      return this.project.workerInfos.filter(item => (item.username.toLowerCase().includes(this.sortM.toLowerCase()) || item.email.toLowerCase().includes(this.sortM.toLowerCase()) ));\n    },\n    minDate(){\n      return this.parents.length > 0 ? (new Date(this.parents.reduce(function (p, v) {\n        return ( p < v.task_start ? p : v.task_start );\n      }, this.parents[0].task_start))) : 0;\n    },\n    maxDate(){\n      let res = this.parents.length > 0 ? (new Date(this.parents.reduce(function (p, v) {\n        return ( p > v.task_end ? p : v.task_end );\n      }, this.parents[0].task_end))) : 0;\n\n      let buf = 0;\n      if (this.$refs.tasks && res){\n        buf = this.$refs.tasks.clientWidth * 0.7;\n        buf = (buf - buf % 40) / 40;\n        buf -= (res.getTime() - this.minDate.getTime())/86400000;\n        if (buf>0) res.setTime(res.getTime()+buf*86400000);\n      }\n\n      return res;\n    },\n    tableHeight(){\n      return  50*(1+this.parents.length)+ this.openParents.reduce(function (p, v) {\n        return ( v.isOpen && this.parents.find(item => item.id === v.id) ? p+=(this.children_task.filter(item => (item.parent.id === v.id)).length) : p );\n      }.bind(this), 0)*30+17;\n    },\n    tableWidth(){\n      return (((this.maxDate- this.minDate)/86400000+1)*40);\n    },\n    taskProps(){\n      return task => ({\n        width: ((new Date(task.task_end) - new Date(task.task_start))/86400000+1)*40-30 + 'px',\n        left: ((new Date(task.task_start) - this.minDate)/86400000)*40 + 'px',\n        background: task.taskComplete ? '#66cdaa' : (new Date(task.task_end) < new Date() ? '#FF7373' : '#6c7bfe')\n      });\n    },\n    datesList(){\n      if (this.minDate === 0) return [{id: 1, title: 'Задач не найдено', days: []}]\n      let res=[]\n      let id = 1;\n      let i = new Date(this.minDate);\n      for (i; i <= this.maxDate; i.setDate(i.getDate() + 1)) {\n        let obj = {id: 1, title: '', days: []}\n        obj.title = i.toLocaleString('ru', {month: 'short'});\n        if (new Date().getFullYear() != i.getFullYear()) obj.title+=i.getFullYear()\n        while (i <= this.maxDate){\n          obj.days.push(i.getDate());\n          if (i.getDay() === 0) break;\n          i.setDate(i.getDate() + 1);\n        }\n        obj.id = id;\n        id+=1;\n        res.push(obj);\n        //res.push(Object.assign({}, obj));\n      }\n\n      return res;\n    },\n\n    formatDate() {\n      return date => {\n        let formDate = new Date(date);\n        let dd = formDate.getDate();\n        if (dd < 10) dd = '0' + dd;\n        let mm = formDate.getMonth() + 1;\n        if (mm < 10) mm = '0' + mm;\n        let yy = formDate.getFullYear();\n        if (yy < 10) yy = '0' + yy;\n        return  yy + '-' + mm + '-' + dd;\n      }\n\n    },\n\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isWorker(){\n      return this.project.workerInfos.findIndex(item => item.id === this.currentUser.id)>=0\n    },\n    isManager(){\n      return this.isUserManager || this.isUserAdmin;\n    },\n    areAllowed(){\n      return !(this.isManager || this.isWorker);\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n      return false;\n    }\n  },\n  mounted() {\n    UserService.getProject(this.$route.params.id).then(\n      response => {\n        this.project = response.data;\n      },\n      error => {\n        this.content =\n          (error.response && error.response.data && error.response.data.message) ||\n          error.message ||\n          error.toString();\n      }\n    );\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n  },\n  methods: {\n    /*\n    startDrag(evt, item) {\n      if (!this.isManager) return;\n      evt.dataTransfer.dropEffect = 'move'\n      evt.dataTransfer.effectAllowed = 'move'\n      evt.dataTransfer.setData('itemID', item.user.id)\n\n    },\n    onDrop (evt, list) {\n      if (!this.isManager) return;\n      const itemID = evt.dataTransfer.getData('itemID')\n      const item = this.items.find(item => item.user.id == itemID)\n      if (list === 3){\n        if (this.project.workerInfos.find(i => i.id == itemID)){\n          this.project.workerInfos.splice(this.project.workerInfos.findIndex(i => i.id == itemID),1)\n        } else {\n          this.project.managers.splice(this.project.managers.findIndex(i => i.id == itemID),1)\n        }\n        UserService.changeUsers(this.project).then(\n            response => {\n              response.data;//not used yet\n            },\n            error => {\n              this.message =\n                  (error.response && error.response.data && error.response.data.message) ||\n                  error.message ||\n                  error.toString();\n            }\n        );\n      } else if(item.list != list) {\n        if (this.project.workerInfos.find(i => i.id == itemID)){\n          this.project.managers.push(this.project.workerInfos.splice(this.project.workerInfos.findIndex(i => i.id == itemID),1)[0])\n        } else{\n          this.project.workerInfos.push(this.project.managers.splice(this.project.managers.findIndex(i => i.id == itemID),1)[0])\n        }\n        UserService.changeUsers(this.project).then(\n            response => {\n              response.data;//not used yet\n            },\n            error => {\n              this.message =\n                  (error.response && error.response.data && error.response.data.message) ||\n                  error.message ||\n                  error.toString();\n            }\n        );\n      }\n    },\n    */\n    delWorker(workerInfo){\n      if (!this.isManager) return;\n      this.project.workerInfos.splice(this.project.workerInfos.findIndex(i => i.id == workerInfo.id),1)\n      UserService.changeUsers(this.project).then(\n          response => {\n            response.data;//not used yet\n          },\n          error => {\n            this.message =\n                (error.response && error.response.data && error.response.data.message) ||\n                error.message ||\n                error.toString();\n          }\n      );\n    },\n    open(task){\n      let parent = this.openParents.find(item => item.id === task.id);\n      if (parent) {\n        parent.isOpen = !parent.isOpen;\n        this.openParents.splice(this.openParents.findIndex(item => item.id === parent.id), 1, parent);\n      } else {\n        this.openParents.push({id: task.id, isOpen: true})\n      }\n    },\n    children(parent){\n      return this.children_task.filter(item => (item.parent.id === parent.id))\n    },\n    children_open(parent){\n      if (this.openParents.find(item => item.id === parent.id) &&\n          this.openParents.find(item => item.id === parent.id).isOpen){\n        return this.children(parent);\n      }\n      else return [];\n    },\n\n    changeName(){\n      if (!this.isManager) return;\n      UserService.changeProjectName(this.project).then(\n          response => {\n            response.data;//not used yet\n          },\n          error => {\n            this.message =\n                (error.response && error.response.data && error.response.data.message) ||\n                error.message ||\n                error.toString();\n          }\n      );\n    },\n    findUsers(){\n      if (this.findUser){\n        UserService.getUsersByEmail(this.findUser).then(\n            response => {\n              //if (response.data.findIndex(item => item.email === this.currentUser.email) >= 0){response.data.splice(response.data.findIndex(item => item.email === this.currentUser.email),1)}\n              this.users = response.data.filter( function( el ) {\n                return (this.project.workerInfos.findIndex(item => item.id === el.id) < 0  &&  this.project.invitations.findIndex(item => item.id === el.id) < 0);\n              }, this);\n              this.selected = [];\n            },\n            error => {//probably not needed\n              this.message =\n                  (error.response && error.response.data && error.response.data.message) ||\n                  error.message ||\n                  error.toString();\n            }\n        ).catch(e => {\n          // eslint-disable-next-line no-console\n          console.log(e);\n        });\n      } else{\n        this.users = [];\n      }\n    },\n    addInv(){\n      if (!this.isManager) return;\n      if (this.selected[0]){\n        // eslint-disable-next-line no-console\n        console.log(this.selected[0]);\n        this.project.invitations.push(this.users[this.users.findIndex(item => item.email === this.selected[0].split(' - ')[1])]);\n        this.findUsers();\n        UserService.changeInvitation(this.project).then(\n            response => {\n              response.data;//not used yet\n              this.message = 'Приглашение добавлено!'\n            },\n            error => {\n              this.message =\n                  (error.response && error.response.data && error.response.data.message) ||\n                  error.message ||\n                  error.toString();\n            }\n        );\n      }\n    },\n    delInv(user){\n      if (!this.isManager) return;\n      this.project.invitations.splice(this.project.invitations.findIndex(item => item.id === user.id),1);\n      UserService.changeInvitation(this.project).then(\n          response => {\n            response.data;//not used yet\n            this.message = 'Приглашение удалено!'\n          },\n          error => {\n            this.message =\n                (error.response && error.response.data && error.response.data.message) ||\n                error.message ||\n                error.toString();\n          }\n      );\n    },\n    //                        task update\n    //                        task update\n    //                        task update\n    openEdit(task){\n      if (task === 0) {this.task = {}}\n      else {\n        this.task = {}\n        Object.assign(this.task, task);\n      }\n      this.isHidden = false;\n\n    },\n    post_task(task){\n      this.project.tasks.push(task);\n      Object.assign(this.task, task);\n      if (task.parent && !task.taskComplete) this.parents.find(item => item.id == task.parent.id).taskComplete = false;\n      this.task_update('Задача добавлена');\n    },\n    put_task(task){\n      this.project.tasks.splice(this.project.tasks.findIndex(item => item.id == task.id), 1, task); //because otherwise computed property doesnt recomputed\n\n      if (this.children(task).length > 0){\n        this.children(task).forEach(item => {\n          if (task.taskComplete) item.taskComplete = true;\n          if (this.formatDate(task.task_start) > this.formatDate(item.task_end) || this.formatDate(task.task_end) < this.formatDate(item.task_start)) {\n            this.del_task(item);\n          } else {\n            if (this.formatDate(task.task_start) > this.formatDate(item.task_start)) item.task_start = task.task_start;\n            if (this.formatDate(task.task_end) < this.formatDate(item.task_end)) item.task_end = task.task_end;\n          }\n          item.parent = task;\n        })\n      } else {\n        if (task.parent && !task.taskComplete) this.parents.find(item => item.id == task.parent.id).taskComplete = false;\n      }\n\n      this.task_update('Задача добавлена');\n    },\n    del_task(task){\n      this.project.tasks.splice(this.project.tasks.findIndex(item => item.id === task.id),1);\n    },\n    task_update(message){\n      UserService.changeTasks(this.project).then(\n          response => {\n            response.data;//not used yet\n            this.message = message;\n          },\n          error => {\n            this.message =\n                (error.response && error.response.data && error.response.data.message) ||\n                error.message ||\n                error.toString();\n          }\n      );\n    }\n  }\n};\n</script>\n\n"]}]}