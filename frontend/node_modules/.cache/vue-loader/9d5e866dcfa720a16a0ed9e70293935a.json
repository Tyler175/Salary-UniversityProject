{"remainingRequest":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\components\\WorkEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\components\\WorkEdit.vue","mtime":1622135614439},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport UserService from '../../services/user.service';\r\n\r\nexport default {\r\n  name: 'TaskEdit',\r\n  props: ['work','post','put','del', 'option'],\r\n  data() {\r\n    return {\r\n      message: '',\r\n      start: '',\r\n      end: '',\r\n      workDate: '',\r\n      task: {},\r\n      tasks: [],\r\n\r\n\r\n      findTask: ''\r\n    };\r\n  },\r\n  computed: {\r\n    allowToEdit(){\r\n      return (this.option === 'project');\r\n    },\r\n    currentUser() {\r\n      return this.$store.state.auth.user;\r\n    },\r\n    formatDate() {\r\n      return date => {\r\n        let formDate = new Date(date);\r\n        let dd = formDate.getDate();\r\n        if (dd < 10) dd = '0' + dd;\r\n        let mm = formDate.getMonth() + 1;\r\n        if (mm < 10) mm = '0' + mm;\r\n        let yy = formDate.getFullYear();\r\n        if (yy < 10) yy = '0' + yy;\r\n        return  yy + '-' + mm + '-' + dd;\r\n      }\r\n    },\r\n\r\n    dateValidate(){\r\n      if (this.end.length !== 5 || this.start.length !== 5) {\r\n        return 'Пожалуйста, заполните время работы'\r\n      } else if(this.formatDate(new Date()) < this.formatDate(this.workDate)){\r\n         return 'Выбранная дата позже сегодняшней';\r\n      } else if(this.task.taskName){\r\n        // eslint-disable-next-line no-console\r\n        console.log(this.formatDate(this.task.task_start), this.formatDate(this.workDate));\r\n        if (this.formatDate(this.task.task_start) > this.formatDate(this.workDate)) return 'В это время у вас еще не было этой задачи';\r\n        else return '';//   ANOTHER TRUE RETURN\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.start = this.work.workStart ? this.formatTime(this.work.workStart): this.formatTime(new Date());\r\n\r\n    this.end = this.work.workEnd ? this.formatTime(this.work.workEnd): this.formatTime(new Date().setHours(new Date().getHours()+1));\r\n\r\n    this.workDate = this.work.workStart ? this.formatDate(this.work.workStart): this.formatDate(new Date());\r\n\r\n    this.task = this.work.task ? this.work.task : {};\r\n\r\n  },\r\n  methods: {\r\n    formatTime(time){\r\n      let formDate = new Date(time);\r\n      let mm = formDate.getMinutes();\r\n      if (mm < 10) mm = '0' + mm;\r\n      let hh = formDate.getHours();\r\n      if (hh < 10) hh = '0' + hh;\r\n      return hh+':'+mm;\r\n    },\r\n    timeMask(value) {\r\n      const hours = [\r\n        /[0-2]/,\r\n        value.charAt(0) === '2' ? /[0-3]/ : /[0-9]/,\r\n      ];\r\n      const minutes = [/[0-5]/, /[0-9]/];\r\n      return value.length > 2\r\n          ? [...hours, ':', ...minutes]\r\n          : hours;\r\n    },\r\n\r\n    findTasks(){\r\n      if (this.findTask){\r\n        UserService.getTaskByUserAndName(this.currentUser.id, this.findTask).then(\r\n            response => {\r\n              this.tasks = response.data;\r\n            }\r\n        )\r\n      } else {\r\n        this.tasks = [];\r\n      }\r\n    },\r\n    save(){\r\n      this.$validator.validateAll().then(isValid => {\r\n        if (isValid && !this.dateValidate && this.task.taskName) {\r\n          this.work.task = this.task;\r\n          this.work.workStart = new Date(this.workDate +' '+ this.start);\r\n          this.work.workEnd = new Date(this.workDate +' '+ this.end);\r\n\r\n          if (this.work.id){\r\n            UserService.putWork(this.work).then(\r\n                response => {\r\n                  if (!response.data) this.message = 'В это время вы делали другую задачу!';\r\n                  else{\r\n                    this.put(response.data);\r\n                    this.message = 'Время работы обновлено!'\r\n                  }\r\n                },\r\n                error => {\r\n                  this.message =\r\n                      (error.response && error.response.data && error.response.data.message) ||\r\n                      error.message ||\r\n                      error.toString();\r\n                }\r\n            );\r\n          } else{\r\n            UserService.postWork(this.work).then(\r\n                response => {\r\n                  if (!response.data){\r\n                    this.message = 'В это время вы делали другую задачу!';\r\n                  }\r\n                  else{\r\n                    this.work.id = response.data.id;\r\n                    this.post(response.data);\r\n                    this.message = 'Время работы добавлено!'\r\n                  }\r\n\r\n                },\r\n                error => {\r\n                  this.message =\r\n                      (error.response && error.response.data && error.response.data.message) ||\r\n                      error.message ||\r\n                      error.toString();\r\n                }\r\n            );\r\n          }\r\n        } else this.message = 'Пожалуйста, измените данные'\r\n      });\r\n    },\r\n    setTask(task){\r\n      if (this.task.taskName) this.tasks.push(this.task)\r\n      this.tasks.splice(this.tasks.findIndex(i => i.id === task.id), 1);\r\n      this.task = task;\r\n    },\r\n    deleteTask(){\r\n      if (this.work.id){\r\n        UserService.delWork(this.work.id).then(\r\n            response => {\r\n              this.del(this.work);\r\n              response.data;\r\n              this.message = 'Время работы удалено!'\r\n              this.$emit('hide');\r\n            },\r\n            error => {\r\n              this.message =\r\n                  (error.response && error.response.data && error.response.data.message) ||\r\n                  error.message ||\r\n                  error.toString();\r\n            }\r\n        );}\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["WorkEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"WorkEdit.vue","sourceRoot":"src/views/components","sourcesContent":["<template>\r\n  <div class=\"cover\">\r\n    <div class = \"editor\">\r\n      <input class=\"close\" type=\"button\" value=\"Х\" v-on:click=\"$emit('whide')\"/>\r\n      <div class=\"row\"><h2 style=\"margin:5px\">{{ task.taskName ? task.taskName : 'Задача не выбрана' }}</h2></div>\r\n      <div class=\"row\">\r\n        <div class=\"column\">\r\n          <input v-bind:disabled=\"allowToEdit\" class=\"select\" type=\"text\" maxlength=\"50\" v-autowidth=\"{maxWidth: '700px', minWidth: '505px', comfortZone: 0}\"\r\n                 v-model=\"findTask\" v-on:input=\"findTasks\"/>\r\n\r\n          <select v-if=\"tasks.length > 0\" class=\"select\" multiple v-bind:size=\"tasks.length > 0 ? tasks.length < 6 ? tasks.length : 5: 1\" style=\"margin-top: -2px\">\r\n            <option v-for=\"task in tasks\" :key=\"task.id\" @click=\"setTask(task)\">{{ task.taskName }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div class = \"fields\" style=\"max-width: 600px; flex-direction: row;\">\r\n        <div style=\"width: 100%; margin-right: 30px\">\r\n          <h3>Дата</h3>\r\n          <input v-bind:disabled=\"allowToEdit\" type=\"date\" v-model=\"workDate\" min=\"2015-01-01\" max=\"2030-01-01\" style=\"height: 50px\"/>\r\n        </div>\r\n        <div style=\"width: 100%; margin-right: 30px\">\r\n          <h3>Начало</h3>\r\n          <input v-bind:disabled=\"allowToEdit\" v-mask=\"timeMask\" v-model=\"start\"/>\r\n        </div>\r\n        <div style=\"width: 100%; margin-right: 30px\">\r\n          <h3>Конец</h3>\r\n          <input v-bind:disabled=\"allowToEdit\" v-mask=\"timeMask\" v-model=\"end\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"dateValidate\" class=\"alert-error\">{{dateValidate}}</div>\r\n\r\n      <div v-if=\"this.option === 'project'\" class = \"fields\" style=\"max-width: 600px; flex-direction: row;\">\r\n        <div style=\"width: 100%; margin-right: 30px\">\r\n          <h3>Исполнитель</h3>\r\n          <div class=\"task\" style=\"width: auto; margin-right: 0px; cursor: auto\">{{this.work.user.username}} - {{this.work.user.email}}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class = \"row\" v-if=\"!allowToEdit\">\r\n        <div class=\"button-g\" @click=\"save\">Сохранить</div>\r\n        <div class=\"button-b\" v-on:click=\"$emit('whide')\">Отменить</div>\r\n        <div class=\"button-r\"  @click=\"deleteTask\" v-if=\"work.id\">Удалить</div>\r\n      </div>\r\n      {{message}}\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport UserService from '../../services/user.service';\r\n\r\nexport default {\r\n  name: 'TaskEdit',\r\n  props: ['work','post','put','del', 'option'],\r\n  data() {\r\n    return {\r\n      message: '',\r\n      start: '',\r\n      end: '',\r\n      workDate: '',\r\n      task: {},\r\n      tasks: [],\r\n\r\n\r\n      findTask: ''\r\n    };\r\n  },\r\n  computed: {\r\n    allowToEdit(){\r\n      return (this.option === 'project');\r\n    },\r\n    currentUser() {\r\n      return this.$store.state.auth.user;\r\n    },\r\n    formatDate() {\r\n      return date => {\r\n        let formDate = new Date(date);\r\n        let dd = formDate.getDate();\r\n        if (dd < 10) dd = '0' + dd;\r\n        let mm = formDate.getMonth() + 1;\r\n        if (mm < 10) mm = '0' + mm;\r\n        let yy = formDate.getFullYear();\r\n        if (yy < 10) yy = '0' + yy;\r\n        return  yy + '-' + mm + '-' + dd;\r\n      }\r\n    },\r\n\r\n    dateValidate(){\r\n      if (this.end.length !== 5 || this.start.length !== 5) {\r\n        return 'Пожалуйста, заполните время работы'\r\n      } else if(this.formatDate(new Date()) < this.formatDate(this.workDate)){\r\n         return 'Выбранная дата позже сегодняшней';\r\n      } else if(this.task.taskName){\r\n        // eslint-disable-next-line no-console\r\n        console.log(this.formatDate(this.task.task_start), this.formatDate(this.workDate));\r\n        if (this.formatDate(this.task.task_start) > this.formatDate(this.workDate)) return 'В это время у вас еще не было этой задачи';\r\n        else return '';//   ANOTHER TRUE RETURN\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.start = this.work.workStart ? this.formatTime(this.work.workStart): this.formatTime(new Date());\r\n\r\n    this.end = this.work.workEnd ? this.formatTime(this.work.workEnd): this.formatTime(new Date().setHours(new Date().getHours()+1));\r\n\r\n    this.workDate = this.work.workStart ? this.formatDate(this.work.workStart): this.formatDate(new Date());\r\n\r\n    this.task = this.work.task ? this.work.task : {};\r\n\r\n  },\r\n  methods: {\r\n    formatTime(time){\r\n      let formDate = new Date(time);\r\n      let mm = formDate.getMinutes();\r\n      if (mm < 10) mm = '0' + mm;\r\n      let hh = formDate.getHours();\r\n      if (hh < 10) hh = '0' + hh;\r\n      return hh+':'+mm;\r\n    },\r\n    timeMask(value) {\r\n      const hours = [\r\n        /[0-2]/,\r\n        value.charAt(0) === '2' ? /[0-3]/ : /[0-9]/,\r\n      ];\r\n      const minutes = [/[0-5]/, /[0-9]/];\r\n      return value.length > 2\r\n          ? [...hours, ':', ...minutes]\r\n          : hours;\r\n    },\r\n\r\n    findTasks(){\r\n      if (this.findTask){\r\n        UserService.getTaskByUserAndName(this.currentUser.id, this.findTask).then(\r\n            response => {\r\n              this.tasks = response.data;\r\n            }\r\n        )\r\n      } else {\r\n        this.tasks = [];\r\n      }\r\n    },\r\n    save(){\r\n      this.$validator.validateAll().then(isValid => {\r\n        if (isValid && !this.dateValidate && this.task.taskName) {\r\n          this.work.task = this.task;\r\n          this.work.workStart = new Date(this.workDate +' '+ this.start);\r\n          this.work.workEnd = new Date(this.workDate +' '+ this.end);\r\n\r\n          if (this.work.id){\r\n            UserService.putWork(this.work).then(\r\n                response => {\r\n                  if (!response.data) this.message = 'В это время вы делали другую задачу!';\r\n                  else{\r\n                    this.put(response.data);\r\n                    this.message = 'Время работы обновлено!'\r\n                  }\r\n                },\r\n                error => {\r\n                  this.message =\r\n                      (error.response && error.response.data && error.response.data.message) ||\r\n                      error.message ||\r\n                      error.toString();\r\n                }\r\n            );\r\n          } else{\r\n            UserService.postWork(this.work).then(\r\n                response => {\r\n                  if (!response.data){\r\n                    this.message = 'В это время вы делали другую задачу!';\r\n                  }\r\n                  else{\r\n                    this.work.id = response.data.id;\r\n                    this.post(response.data);\r\n                    this.message = 'Время работы добавлено!'\r\n                  }\r\n\r\n                },\r\n                error => {\r\n                  this.message =\r\n                      (error.response && error.response.data && error.response.data.message) ||\r\n                      error.message ||\r\n                      error.toString();\r\n                }\r\n            );\r\n          }\r\n        } else this.message = 'Пожалуйста, измените данные'\r\n      });\r\n    },\r\n    setTask(task){\r\n      if (this.task.taskName) this.tasks.push(this.task)\r\n      this.tasks.splice(this.tasks.findIndex(i => i.id === task.id), 1);\r\n      this.task = task;\r\n    },\r\n    deleteTask(){\r\n      if (this.work.id){\r\n        UserService.delWork(this.work.id).then(\r\n            response => {\r\n              this.del(this.work);\r\n              response.data;\r\n              this.message = 'Время работы удалено!'\r\n              this.$emit('hide');\r\n            },\r\n            error => {\r\n              this.message =\r\n                  (error.response && error.response.data && error.response.data.message) ||\r\n                  error.message ||\r\n                  error.toString();\r\n            }\r\n        );}\r\n    }\r\n  }\r\n};\r\n</script>"]}]}