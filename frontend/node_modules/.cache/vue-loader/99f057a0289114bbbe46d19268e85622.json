{"remainingRequest":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\Projects.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\Projects.vue","mtime":1634772343611},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport UserService from '../services/user.service';\n\nexport default {\n  name: 'Projects',\n  data() {\n    return {\n      content: '',\n      invitations: [],\n      projects: []\n    };\n  },\n  computed: {\n    //handle projects duplicates\n    /*otherProjects(){\n      return this.projects.filter((item, index) => this.projects.indexOf(item) === index)\n    },*/\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n      return false;\n    },\n    isManager(){\n      return this.isUserManager || this.isUserAdmin;\n    }\n  },\n  mounted() {\n    UserService.getInvitations().then(\n        response => {\n          this.invitations = response.data;\n        },\n        error => {\n          this.content =\n              (error.response && error.response.data && error.response.data.message) ||\n              error.message ||\n              error.toString();\n        }\n    );\n    UserService.getProjects().then(\n      response => {\n        this.projects = response.data;\n\n      },\n      error => {\n        this.content =\n          (error.response && error.response.data && error.response.data.message) ||\n          error.message ||\n          error.toString();\n      }\n    );\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n  },\n  methods:{\n    link(id){\n      this.$router.push('/project/' + id);\n    },\n    createProject(){\n      UserService.postProject().then(\n          response => {\n            this.$router.push('/project/' + response.data.id);\n          },\n          error => {\n            this.content =\n                (error.response && error.response.data && error.response.data.message) ||\n                error.message ||\n                error.toString();\n          }\n      );\n    },\n    acceptInv(inv){\n      let project = this.invitations.splice(this.invitations.findIndex(item => item.id === inv.id), 1)[0];\n      project.invitations.splice(project.invitations.findIndex(item => item.id === this.currentUser.id), 1);\n      UserService.changeInvitation(project);\n      UserService.getUser().then(\n          response => {\n            project.workerInfos.push(response.data);\n            UserService.changeUsers(project);\n            this.projects.push(project);\n          }\n      )\n    },\n    declineInv(inv){\n      let project = this.invitations.splice(this.invitations.findIndex(item => item.id === inv.id), 1)[0];\n      project.invitations.splice(project.invitations.findIndex(item => item.id === this.currentUser.id), 1);\n      UserService.changeInvitation(project);\n    },\n    del(id){\n      this.projects.splice(this.projects.findIndex(item => item.id == id),1);\n      UserService.delProject(id);\n    },\n    leave(id){\n      let project = this.projects.splice(this.projects.findIndex(item => item.id == id),1)[0];\n      UserService.getUser().then(\n          response => {\n            project.workerInfos.splice(project.workerInfos.findIndex(item => item.id == response.data.id),1);\n\n            UserService.changeUsers(project);\n          }\n      )\n    }\n\n  }\n\n};\n",{"version":3,"sources":["Projects.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA","file":"Projects.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n\n      <div v-if=\"currentUser\" class=\"user-menu\">\n        <li>\n          <router-link to=\"/today\">To Do</router-link>\n        </li>\n        <li>\n          <router-link to=\"/tasks\">Задачи</router-link>\n        </li>\n        <li>\n          <router-link to=\"/statistics\">Статистика</router-link>\n        </li>\n        <li>\n          <router-link to=\"/projects\" class=\"active\" @click.prevent>Проекты</router-link>\n        </li>\n        <li>\n          <router-link to=\"/profile\">Мой профиль</router-link>\n        </li>\n        <li v-if=\"isUserManager && false\">\n          <router-link to=\"/mod\">Панель модератора</router-link>\n        </li>\n        <li v-if=\"isUserAdmin\">\n          <router-link to=\"/admin\">Панель администратора</router-link>\n        </li>\n      </div>\n    <div class=\"content\">\n      <div class=\"action\">\n        <router-link to=\"/profile\">\n          <h2 style=\"margin: 0\">{{ currentUser.username }}</h2>\n        </router-link>\n      </div>\n      <div>\n\n        <div class=\"row\">\n          <h1>Проекты</h1>\n          <button v-if=\"isManager\" class=\"button-p\" @click=\"createProject\">Новый проект</button>\n        </div>\n        <div v-if=\"invitations.length > 0\" class=\"row\"><h2>Приглашения</h2></div>\n        <div v-for=\"invitation in invitations\" :key=\"invitation.id\" class=\"row\">\n          <div class=\"task\" style=\"cursor: auto\">{{invitation.name}}</div>\n          <button class=\"button-g\" @click=\"acceptInv(invitation)\">Принять</button>\n          <button class=\"button-b\" @click=\"declineInv(invitation)\">Отказать</button>\n        </div>\n        <div v-if=\"invitations.length > 0\" class=\"row\"><h2>Проекты</h2></div>\n        <div v-if=\"projects.length <= 0\" class=\"task\" style=\"cursor: auto\">Пока вы не участвуете в проектах</div>\n        <div class=\"row\" v-for=\"project in projects\" :key=\"project.id\">\n          <div class=\"task\"  @click=\"link(project.id)\">{{ project.name }}</div>\n          <button class=\"button-b\" @click=\"leave(project.id)\" style=\"width: auto\">Покинуть проект</button>\n          <button v-if=\"isManager\" class=\"button-r\" @click=\"del(project.id)\" style=\"width: auto\">Удалить</button>\n        </div>\n        <!-- END -->\n        <h3>{{content}}</h3>\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport UserService from '../services/user.service';\n\nexport default {\n  name: 'Projects',\n  data() {\n    return {\n      content: '',\n      invitations: [],\n      projects: []\n    };\n  },\n  computed: {\n    //handle projects duplicates\n    /*otherProjects(){\n      return this.projects.filter((item, index) => this.projects.indexOf(item) === index)\n    },*/\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n      return false;\n    },\n    isManager(){\n      return this.isUserManager || this.isUserAdmin;\n    }\n  },\n  mounted() {\n    UserService.getInvitations().then(\n        response => {\n          this.invitations = response.data;\n        },\n        error => {\n          this.content =\n              (error.response && error.response.data && error.response.data.message) ||\n              error.message ||\n              error.toString();\n        }\n    );\n    UserService.getProjects().then(\n      response => {\n        this.projects = response.data;\n\n      },\n      error => {\n        this.content =\n          (error.response && error.response.data && error.response.data.message) ||\n          error.message ||\n          error.toString();\n      }\n    );\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n  },\n  methods:{\n    link(id){\n      this.$router.push('/project/' + id);\n    },\n    createProject(){\n      UserService.postProject().then(\n          response => {\n            this.$router.push('/project/' + response.data.id);\n          },\n          error => {\n            this.content =\n                (error.response && error.response.data && error.response.data.message) ||\n                error.message ||\n                error.toString();\n          }\n      );\n    },\n    acceptInv(inv){\n      let project = this.invitations.splice(this.invitations.findIndex(item => item.id === inv.id), 1)[0];\n      project.invitations.splice(project.invitations.findIndex(item => item.id === this.currentUser.id), 1);\n      UserService.changeInvitation(project);\n      UserService.getUser().then(\n          response => {\n            project.workerInfos.push(response.data);\n            UserService.changeUsers(project);\n            this.projects.push(project);\n          }\n      )\n    },\n    declineInv(inv){\n      let project = this.invitations.splice(this.invitations.findIndex(item => item.id === inv.id), 1)[0];\n      project.invitations.splice(project.invitations.findIndex(item => item.id === this.currentUser.id), 1);\n      UserService.changeInvitation(project);\n    },\n    del(id){\n      this.projects.splice(this.projects.findIndex(item => item.id == id),1);\n      UserService.delProject(id);\n    },\n    leave(id){\n      let project = this.projects.splice(this.projects.findIndex(item => item.id == id),1)[0];\n      UserService.getUser().then(\n          response => {\n            project.workerInfos.splice(project.workerInfos.findIndex(item => item.id == response.data.id),1);\n\n            UserService.changeUsers(project);\n          }\n      )\n    }\n\n  }\n\n};\n</script>\n"]}]}