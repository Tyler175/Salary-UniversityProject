{"remainingRequest":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\Today.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\src\\views\\Today.vue","mtime":1622192781411},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\University\\SoftDevTech\\Salary\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport UserService from '../services/user.service';\nimport TaskEdit from \"@/views/components/TaskEdit.vue\";\n\nexport default {\n  name: 'Today',\n  data() {\n    return {\n      isHidden: true,\n      tasks: [],\n      content: '',\n      task: {},\n      current: {},\n\n      work: null,\n\n      checkId: null,\n      timerId: null,\n      startDate: new Date(),\n      currentTimer: 0,\n      timer: 0,\n      currentTime: '00:00:00'\n    };\n  },\n  components:{\n    'v-taskEdit' : TaskEdit\n  },\n  computed: {\n    formatDate() {\n      return date => {\n        let formDate = new Date(date);\n        let dd = formDate.getDate();\n        if (dd < 10) dd = '0' + dd;\n        let mm = formDate.getMonth() + 1;\n        if (mm < 10) mm = '0' + mm;\n        let yy = formDate.getFullYear();\n        if (yy < 10) yy = '0' + yy;\n        return  yy + '-' + mm + '-' + dd;\n      }\n\n    },\n    filterTasks(){\n    return this.tasks.filter(item =>\n          (this.formatDate(item.task_start) <= this.formatDate(new Date())) &&\n          (this.formatDate(item.task_end) >= this.formatDate(new Date())) && !item.current\n      );\n    },\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n\n      return false;\n    }\n  },\n  mounted() {\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n    UserService.getToday().then(\n      response => {\n        this.tasks = response.data;\n        this.current = this.tasks.find(item => item.current);\n        this.current = this.current ? this.current : {};\n        if (this.current.id) UserService.getCurrentWork(this.currentUser.id, this.current.id).then(\n            response => {\n              this.work = response.data;\n              if (!this.work) {\n                this.work = {};\n              } else{\n                this.timerId = setTimeout(this.countdown, 1);\n              }\n              if (this.work.startDate) this.timer = new Date().getTime() - this.work.startDate.getTime();\n              let seconds = Math.floor((this.timer / 1000) % 60);\n              let minutes = Math.floor((this.timer / 1000 / 60) % 60);\n              let hours = Math.floor((this.timer / (1000 * 60 * 60)) % 24);\n              //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n              if (seconds < 10) seconds = '0' + seconds;\n              if (minutes < 10) minutes = '0' + minutes;\n              if (hours < 10) hours = '0' + hours;\n              this.currentTime = hours+':'+minutes+':'+seconds;\n            }\n        ); else {\n          UserService.saveTimer(this.currentUser.id, 0);\n        }\n\n\n      },\n      error => {\n        this.content =\n          (error.response && error.response.data && error.response.data.message) ||\n          error.message ||\n          error.toString();\n      }\n    );\n\n\n    UserService.getTimer(this.currentUser.id).then(\n        response => {\n          this.timer = response.data;\n        }\n    );\n    //\n\n    //\n\n  },\n\n\n  methods: {\n    openEdit(task){\n      if (task === 0) {this.task = {}}\n      else {\n        this.task = {}\n        Object.assign(this.task, task);\n      }\n      this.isHidden = false;\n    },\n    toStart(task){\n      if (task){ //if we choose task from list\n        if (this.current.taskName) {\n          this.toStop();\n          this.current.current = false;\n          UserService.putTask(this.current);\n        }\n        this.currentTime = '00:00:00';\n        this.current = task;\n        this.current.current = true;\n        UserService.putTask(this.current);\n        this.timer = 0;\n        UserService.saveTimer(this.currentUser.id, this.timer);\n      } //continue after break\n\n      if (this.work === '') this.work = {} //i dont know how it became a string\n      this.work.task = this.current;\n      this.work.workStart = new Date();\n      this.work.workEnd = null;\n\n      if (this.checkId != null) clearTimeout(this.checkId);\n      this.checkId = setTimeout(UserService.postWork, 1000, this.work);\n\n      this.timerId = setTimeout(this.countdown, 1);\n    },\n    toStop(){\n      if (this.currentTimer - this.timer > 1000)\n      {\n\n        this.work.workEnd = new Date();\n        this.timer = this.currentTimer;\n\n        UserService.saveTimer(this.currentUser.id, this.timer);\n        UserService.setWorkEnd(this.work);\n\n      }\n\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    },\n    countdown() {\n      this.currentTimer = new Date().getTime() - new Date(this.work.workStart).getTime();\n      this.currentTimer += this.timer;\n      let seconds = Math.floor((this.currentTimer / 1000) % 60);\n      let minutes = Math.floor((this.currentTimer / 1000 / 60) % 60);\n      let hours = Math.floor((this.currentTimer / (1000 * 60 * 60)) % 24);\n      //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n      if (seconds < 10) seconds = '0' + seconds;\n      if (minutes < 10) minutes = '0' + minutes;\n      if (hours < 10) hours = '0' + hours;\n      this.currentTime = hours+':'+minutes+':'+seconds;\n      this.timerId = setTimeout(this.countdown, 1000);\n\n    },\n    post(task){\n      this.tasks.push(task);\n      Object.assign(this.task, task);\n    },\n    put(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id == task.id), 1, task);\n\n    },\n    del(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id === task.id),1);\n    }\n  }\n};\n",{"version":3,"sources":["Today.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Today.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <v-taskEdit v-if='!isHidden' v-on:hide=\"isHidden = true\"\n                :task=\"task\" :post=\"post\" :put=\"put\" :del=\"del\"></v-taskEdit>\n\n    <div v-if=\"currentUser\" class=\"user-menu\">\n      <li>\n        <router-link to=\"/today\" class=\"active\" @click.prevent>To Do</router-link>\n      </li>\n      <li>\n        <router-link to=\"/tasks\">Задачи</router-link>\n      </li>\n      <li>\n        <router-link to=\"/statistics\">Статистика</router-link>\n      </li>\n      <li>\n        <router-link to=\"/projects\">Проекты</router-link>\n      </li>\n      <li>\n        <router-link to=\"/profile\">Мой профиль</router-link>\n      </li>\n      <li v-if=\"isUserManager && false\">\n        <router-link to=\"/mod\">Панель модератора</router-link>\n      </li>\n      <li v-if=\"isUserAdmin\">\n        <router-link to=\"/admin\">Панель администратора</router-link>\n      </li>\n    </div>\n    <div class=\"content\">\n      <div class=\"action\">\n        <router-link to=\"/profile\">\n          <h2 style=\"margin: 0\">{{ currentUser.username }}</h2>\n        </router-link>\n      </div>\n      <div>\n        <h1>Текущая задача</h1>\n        <div class=\"row\">\n          <div v-if=\"!current.taskName\" class=\"task\" style=\"cursor: auto\"> Задача не выбрана </div>\n          <div v-else class=\"task\" style=\"cursor: auto\"> {{ current.taskName }} </div>\n          <div class=\"timer\"> {{ currentTime }} &nbsp;</div>\n        </div>\n        <button class=\"button-b\" v-if=\"current.taskName && timerId != null\" @click=\"toStop\">Перерыв</button>\n        <button style=\"width: auto\" class=\"button-g\" v-if=\"current.taskName && timerId === null\" @click=\"toStart(0)\">Продолжить</button>\n        <div class=\"row\">\n          <h1>Задачи на сегодня</h1>\n          <button class=\"button-p\" @click=\"openEdit(0)\">Добавить задачу</button>\n        </div>\n        <div class=\"row\" v-for=\"task in filterTasks\" :key=\"task.id\">\n          <div class=\"task\"  @click=\"openEdit(task)\">{{task.taskName}}</div>\n          <button class=\"button-g\" @click=\"toStart(task)\">Начать</button>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n</template>\n\n<script>\nimport UserService from '../services/user.service';\nimport TaskEdit from \"@/views/components/TaskEdit.vue\";\n\nexport default {\n  name: 'Today',\n  data() {\n    return {\n      isHidden: true,\n      tasks: [],\n      content: '',\n      task: {},\n      current: {},\n\n      work: null,\n\n      checkId: null,\n      timerId: null,\n      startDate: new Date(),\n      currentTimer: 0,\n      timer: 0,\n      currentTime: '00:00:00'\n    };\n  },\n  components:{\n    'v-taskEdit' : TaskEdit\n  },\n  computed: {\n    formatDate() {\n      return date => {\n        let formDate = new Date(date);\n        let dd = formDate.getDate();\n        if (dd < 10) dd = '0' + dd;\n        let mm = formDate.getMonth() + 1;\n        if (mm < 10) mm = '0' + mm;\n        let yy = formDate.getFullYear();\n        if (yy < 10) yy = '0' + yy;\n        return  yy + '-' + mm + '-' + dd;\n      }\n\n    },\n    filterTasks(){\n    return this.tasks.filter(item =>\n          (this.formatDate(item.task_start) <= this.formatDate(new Date())) &&\n          (this.formatDate(item.task_end) >= this.formatDate(new Date())) && !item.current\n      );\n    },\n    currentUser() {\n      return this.$store.state.auth.user;\n    },\n    isUserAdmin() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_ADMIN');\n      }\n\n      return false;\n    },\n    isUserManager() {\n      if (this.currentUser && this.currentUser.roles) {\n        return this.currentUser.roles.includes('ROLE_MANAGER');\n      }\n\n      return false;\n    }\n  },\n  mounted() {\n    if (!this.currentUser) {\n      this.$router.push('/login');\n    }\n    UserService.getToday().then(\n      response => {\n        this.tasks = response.data;\n        this.current = this.tasks.find(item => item.current);\n        this.current = this.current ? this.current : {};\n        if (this.current.id) UserService.getCurrentWork(this.currentUser.id, this.current.id).then(\n            response => {\n              this.work = response.data;\n              if (!this.work) {\n                this.work = {};\n              } else{\n                this.timerId = setTimeout(this.countdown, 1);\n              }\n              if (this.work.startDate) this.timer = new Date().getTime() - this.work.startDate.getTime();\n              let seconds = Math.floor((this.timer / 1000) % 60);\n              let minutes = Math.floor((this.timer / 1000 / 60) % 60);\n              let hours = Math.floor((this.timer / (1000 * 60 * 60)) % 24);\n              //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n              if (seconds < 10) seconds = '0' + seconds;\n              if (minutes < 10) minutes = '0' + minutes;\n              if (hours < 10) hours = '0' + hours;\n              this.currentTime = hours+':'+minutes+':'+seconds;\n            }\n        ); else {\n          UserService.saveTimer(this.currentUser.id, 0);\n        }\n\n\n      },\n      error => {\n        this.content =\n          (error.response && error.response.data && error.response.data.message) ||\n          error.message ||\n          error.toString();\n      }\n    );\n\n\n    UserService.getTimer(this.currentUser.id).then(\n        response => {\n          this.timer = response.data;\n        }\n    );\n    //\n\n    //\n\n  },\n\n\n  methods: {\n    openEdit(task){\n      if (task === 0) {this.task = {}}\n      else {\n        this.task = {}\n        Object.assign(this.task, task);\n      }\n      this.isHidden = false;\n    },\n    toStart(task){\n      if (task){ //if we choose task from list\n        if (this.current.taskName) {\n          this.toStop();\n          this.current.current = false;\n          UserService.putTask(this.current);\n        }\n        this.currentTime = '00:00:00';\n        this.current = task;\n        this.current.current = true;\n        UserService.putTask(this.current);\n        this.timer = 0;\n        UserService.saveTimer(this.currentUser.id, this.timer);\n      } //continue after break\n\n      if (this.work === '') this.work = {} //i dont know how it became a string\n      this.work.task = this.current;\n      this.work.workStart = new Date();\n      this.work.workEnd = null;\n\n      if (this.checkId != null) clearTimeout(this.checkId);\n      this.checkId = setTimeout(UserService.postWork, 1000, this.work);\n\n      this.timerId = setTimeout(this.countdown, 1);\n    },\n    toStop(){\n      if (this.currentTimer - this.timer > 1000)\n      {\n\n        this.work.workEnd = new Date();\n        this.timer = this.currentTimer;\n\n        UserService.saveTimer(this.currentUser.id, this.timer);\n        UserService.setWorkEnd(this.work);\n\n      }\n\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    },\n    countdown() {\n      this.currentTimer = new Date().getTime() - new Date(this.work.workStart).getTime();\n      this.currentTimer += this.timer;\n      let seconds = Math.floor((this.currentTimer / 1000) % 60);\n      let minutes = Math.floor((this.currentTimer / 1000 / 60) % 60);\n      let hours = Math.floor((this.currentTimer / (1000 * 60 * 60)) % 24);\n      //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n      if (seconds < 10) seconds = '0' + seconds;\n      if (minutes < 10) minutes = '0' + minutes;\n      if (hours < 10) hours = '0' + hours;\n      this.currentTime = hours+':'+minutes+':'+seconds;\n      this.timerId = setTimeout(this.countdown, 1000);\n\n    },\n    post(task){\n      this.tasks.push(task);\n      Object.assign(this.task, task);\n    },\n    put(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id == task.id), 1, task);\n\n    },\n    del(task){\n      this.tasks.splice(this.tasks.findIndex(item => item.id === task.id),1);\n    }\n  }\n};\n</script>\n"]}]}